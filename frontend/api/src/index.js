// Code generated by protobuf.js in compile-protos.sh. DO NOT EDIT.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const saiprakash_v = $root.saiprakash_v = (() => {

    /**
     * Namespace saiprakash_v.
     * @exports saiprakash_v
     * @namespace
     */
    const saiprakash_v = {};

    saiprakash_v.echo = (function() {

        /**
         * Namespace echo.
         * @memberof saiprakash_v
         * @namespace
         */
        const echo = {};

        echo.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof saiprakash_v.echo
             * @namespace
             */
            const v1 = {};

            v1.EchoAPI = (function() {

                /**
                 * Constructs a new EchoAPI service.
                 * @memberof saiprakash_v.echo.v1
                 * @classdesc Represents an EchoAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function EchoAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (EchoAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = EchoAPI;

                /**
                 * Callback as used by {@link saiprakash_v.echo.v1.EchoAPI#sayHello}.
                 * @memberof saiprakash_v.echo.v1.EchoAPI
                 * @typedef SayHelloCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {saiprakash_v.echo.v1.SayHelloResponse} [response] SayHelloResponse
                 */

                /**
                 * Calls SayHello.
                 * @function sayHello
                 * @memberof saiprakash_v.echo.v1.EchoAPI
                 * @instance
                 * @param {saiprakash_v.echo.v1.ISayHelloRequest} request SayHelloRequest message or plain object
                 * @param {saiprakash_v.echo.v1.EchoAPI.SayHelloCallback} callback Node-style callback called with the error, if any, and SayHelloResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(EchoAPI.prototype.sayHello = function sayHello(request, callback) {
                    return this.rpcCall(sayHello, $root.saiprakash_v.echo.v1.SayHelloRequest, $root.saiprakash_v.echo.v1.SayHelloResponse, request, callback);
                }, "name", { value: "SayHello" });

                /**
                 * Calls SayHello.
                 * @function sayHello
                 * @memberof saiprakash_v.echo.v1.EchoAPI
                 * @instance
                 * @param {saiprakash_v.echo.v1.ISayHelloRequest} request SayHelloRequest message or plain object
                 * @returns {Promise<saiprakash_v.echo.v1.SayHelloResponse>} Promise
                 * @variation 2
                 */

                return EchoAPI;
            })();

            v1.SayHelloRequest = (function() {

                /**
                 * Properties of a SayHelloRequest.
                 * @memberof saiprakash_v.echo.v1
                 * @interface ISayHelloRequest
                 * @property {string|null} [name] SayHelloRequest name
                 */

                /**
                 * Constructs a new SayHelloRequest.
                 * @memberof saiprakash_v.echo.v1
                 * @classdesc Represents a SayHelloRequest.
                 * @implements ISayHelloRequest
                 * @constructor
                 * @param {saiprakash_v.echo.v1.ISayHelloRequest=} [properties] Properties to set
                 */
                function SayHelloRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SayHelloRequest name.
                 * @member {string} name
                 * @memberof saiprakash_v.echo.v1.SayHelloRequest
                 * @instance
                 */
                SayHelloRequest.prototype.name = "";

                /**
                 * Verifies a SayHelloRequest message.
                 * @function verify
                 * @memberof saiprakash_v.echo.v1.SayHelloRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SayHelloRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };

                /**
                 * Creates a SayHelloRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof saiprakash_v.echo.v1.SayHelloRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {saiprakash_v.echo.v1.SayHelloRequest} SayHelloRequest
                 */
                SayHelloRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.saiprakash_v.echo.v1.SayHelloRequest)
                        return object;
                    let message = new $root.saiprakash_v.echo.v1.SayHelloRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };

                /**
                 * Creates a plain object from a SayHelloRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof saiprakash_v.echo.v1.SayHelloRequest
                 * @static
                 * @param {saiprakash_v.echo.v1.SayHelloRequest} message SayHelloRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SayHelloRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };

                /**
                 * Converts this SayHelloRequest to JSON.
                 * @function toJSON
                 * @memberof saiprakash_v.echo.v1.SayHelloRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SayHelloRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SayHelloRequest;
            })();

            v1.SayHelloResponse = (function() {

                /**
                 * Properties of a SayHelloResponse.
                 * @memberof saiprakash_v.echo.v1
                 * @interface ISayHelloResponse
                 * @property {string|null} [message] SayHelloResponse message
                 */

                /**
                 * Constructs a new SayHelloResponse.
                 * @memberof saiprakash_v.echo.v1
                 * @classdesc Represents a SayHelloResponse.
                 * @implements ISayHelloResponse
                 * @constructor
                 * @param {saiprakash_v.echo.v1.ISayHelloResponse=} [properties] Properties to set
                 */
                function SayHelloResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SayHelloResponse message.
                 * @member {string} message
                 * @memberof saiprakash_v.echo.v1.SayHelloResponse
                 * @instance
                 */
                SayHelloResponse.prototype.message = "";

                /**
                 * Verifies a SayHelloResponse message.
                 * @function verify
                 * @memberof saiprakash_v.echo.v1.SayHelloResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SayHelloResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    return null;
                };

                /**
                 * Creates a SayHelloResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof saiprakash_v.echo.v1.SayHelloResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {saiprakash_v.echo.v1.SayHelloResponse} SayHelloResponse
                 */
                SayHelloResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.saiprakash_v.echo.v1.SayHelloResponse)
                        return object;
                    let message = new $root.saiprakash_v.echo.v1.SayHelloResponse();
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };

                /**
                 * Creates a plain object from a SayHelloResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof saiprakash_v.echo.v1.SayHelloResponse
                 * @static
                 * @param {saiprakash_v.echo.v1.SayHelloResponse} message SayHelloResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SayHelloResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.message = "";
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    return object;
                };

                /**
                 * Converts this SayHelloResponse to JSON.
                 * @function toJSON
                 * @memberof saiprakash_v.echo.v1.SayHelloResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SayHelloResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SayHelloResponse;
            })();

            return v1;
        })();

        return echo;
    })();

    return saiprakash_v;
})();

export const validate = $root.validate = (() => {

    /**
     * Namespace validate.
     * @exports validate
     * @namespace
     */
    const validate = {};

    validate.FieldRules = (function() {

        /**
         * Properties of a FieldRules.
         * @memberof validate
         * @interface IFieldRules
         * @property {validate.IMessageRules|null} [message] FieldRules message
         * @property {validate.IFloatRules|null} [float] FieldRules float
         * @property {validate.IDoubleRules|null} [double] FieldRules double
         * @property {validate.IInt32Rules|null} [int32] FieldRules int32
         * @property {validate.IInt64Rules|null} [int64] FieldRules int64
         * @property {validate.IUInt32Rules|null} [uint32] FieldRules uint32
         * @property {validate.IUInt64Rules|null} [uint64] FieldRules uint64
         * @property {validate.ISInt32Rules|null} [sint32] FieldRules sint32
         * @property {validate.ISInt64Rules|null} [sint64] FieldRules sint64
         * @property {validate.IFixed32Rules|null} [fixed32] FieldRules fixed32
         * @property {validate.IFixed64Rules|null} [fixed64] FieldRules fixed64
         * @property {validate.ISFixed32Rules|null} [sfixed32] FieldRules sfixed32
         * @property {validate.ISFixed64Rules|null} [sfixed64] FieldRules sfixed64
         * @property {validate.IBoolRules|null} [bool] FieldRules bool
         * @property {validate.IStringRules|null} [string] FieldRules string
         * @property {validate.IBytesRules|null} [bytes] FieldRules bytes
         * @property {validate.IEnumRules|null} ["enum"] FieldRules enum
         * @property {validate.IRepeatedRules|null} [repeated] FieldRules repeated
         * @property {validate.IMapRules|null} [map] FieldRules map
         * @property {validate.IAnyRules|null} [any] FieldRules any
         * @property {validate.IDurationRules|null} [duration] FieldRules duration
         * @property {validate.ITimestampRules|null} [timestamp] FieldRules timestamp
         */

        /**
         * Constructs a new FieldRules.
         * @memberof validate
         * @classdesc Represents a FieldRules.
         * @implements IFieldRules
         * @constructor
         * @param {validate.IFieldRules=} [properties] Properties to set
         */
        function FieldRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FieldRules message.
         * @member {validate.IMessageRules|null|undefined} message
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.message = null;

        /**
         * FieldRules float.
         * @member {validate.IFloatRules|null|undefined} float
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.float = null;

        /**
         * FieldRules double.
         * @member {validate.IDoubleRules|null|undefined} double
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.double = null;

        /**
         * FieldRules int32.
         * @member {validate.IInt32Rules|null|undefined} int32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.int32 = null;

        /**
         * FieldRules int64.
         * @member {validate.IInt64Rules|null|undefined} int64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.int64 = null;

        /**
         * FieldRules uint32.
         * @member {validate.IUInt32Rules|null|undefined} uint32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.uint32 = null;

        /**
         * FieldRules uint64.
         * @member {validate.IUInt64Rules|null|undefined} uint64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.uint64 = null;

        /**
         * FieldRules sint32.
         * @member {validate.ISInt32Rules|null|undefined} sint32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.sint32 = null;

        /**
         * FieldRules sint64.
         * @member {validate.ISInt64Rules|null|undefined} sint64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.sint64 = null;

        /**
         * FieldRules fixed32.
         * @member {validate.IFixed32Rules|null|undefined} fixed32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.fixed32 = null;

        /**
         * FieldRules fixed64.
         * @member {validate.IFixed64Rules|null|undefined} fixed64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.fixed64 = null;

        /**
         * FieldRules sfixed32.
         * @member {validate.ISFixed32Rules|null|undefined} sfixed32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.sfixed32 = null;

        /**
         * FieldRules sfixed64.
         * @member {validate.ISFixed64Rules|null|undefined} sfixed64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.sfixed64 = null;

        /**
         * FieldRules bool.
         * @member {validate.IBoolRules|null|undefined} bool
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.bool = null;

        /**
         * FieldRules string.
         * @member {validate.IStringRules|null|undefined} string
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.string = null;

        /**
         * FieldRules bytes.
         * @member {validate.IBytesRules|null|undefined} bytes
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.bytes = null;

        /**
         * FieldRules enum.
         * @member {validate.IEnumRules|null|undefined} enum
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype["enum"] = null;

        /**
         * FieldRules repeated.
         * @member {validate.IRepeatedRules|null|undefined} repeated
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.repeated = null;

        /**
         * FieldRules map.
         * @member {validate.IMapRules|null|undefined} map
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.map = null;

        /**
         * FieldRules any.
         * @member {validate.IAnyRules|null|undefined} any
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.any = null;

        /**
         * FieldRules duration.
         * @member {validate.IDurationRules|null|undefined} duration
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.duration = null;

        /**
         * FieldRules timestamp.
         * @member {validate.ITimestampRules|null|undefined} timestamp
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.timestamp = null;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * FieldRules type.
         * @member {"float"|"double"|"int32"|"int64"|"uint32"|"uint64"|"sint32"|"sint64"|"fixed32"|"fixed64"|"sfixed32"|"sfixed64"|"bool"|"string"|"bytes"|"enum"|"repeated"|"map"|"any"|"duration"|"timestamp"|undefined} type
         * @memberof validate.FieldRules
         * @instance
         */
        Object.defineProperty(FieldRules.prototype, "type", {
            get: $util.oneOfGetter($oneOfFields = ["float", "double", "int32", "int64", "uint32", "uint64", "sint32", "sint64", "fixed32", "fixed64", "sfixed32", "sfixed64", "bool", "string", "bytes", "enum", "repeated", "map", "any", "duration", "timestamp"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Verifies a FieldRules message.
         * @function verify
         * @memberof validate.FieldRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FieldRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message.message != null && message.hasOwnProperty("message")) {
                let error = $root.validate.MessageRules.verify(message.message);
                if (error)
                    return "message." + error;
            }
            if (message.float != null && message.hasOwnProperty("float")) {
                properties.type = 1;
                {
                    let error = $root.validate.FloatRules.verify(message.float);
                    if (error)
                        return "float." + error;
                }
            }
            if (message.double != null && message.hasOwnProperty("double")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.DoubleRules.verify(message.double);
                    if (error)
                        return "double." + error;
                }
            }
            if (message.int32 != null && message.hasOwnProperty("int32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.Int32Rules.verify(message.int32);
                    if (error)
                        return "int32." + error;
                }
            }
            if (message.int64 != null && message.hasOwnProperty("int64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.Int64Rules.verify(message.int64);
                    if (error)
                        return "int64." + error;
                }
            }
            if (message.uint32 != null && message.hasOwnProperty("uint32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.UInt32Rules.verify(message.uint32);
                    if (error)
                        return "uint32." + error;
                }
            }
            if (message.uint64 != null && message.hasOwnProperty("uint64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.UInt64Rules.verify(message.uint64);
                    if (error)
                        return "uint64." + error;
                }
            }
            if (message.sint32 != null && message.hasOwnProperty("sint32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.SInt32Rules.verify(message.sint32);
                    if (error)
                        return "sint32." + error;
                }
            }
            if (message.sint64 != null && message.hasOwnProperty("sint64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.SInt64Rules.verify(message.sint64);
                    if (error)
                        return "sint64." + error;
                }
            }
            if (message.fixed32 != null && message.hasOwnProperty("fixed32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.Fixed32Rules.verify(message.fixed32);
                    if (error)
                        return "fixed32." + error;
                }
            }
            if (message.fixed64 != null && message.hasOwnProperty("fixed64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.Fixed64Rules.verify(message.fixed64);
                    if (error)
                        return "fixed64." + error;
                }
            }
            if (message.sfixed32 != null && message.hasOwnProperty("sfixed32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.SFixed32Rules.verify(message.sfixed32);
                    if (error)
                        return "sfixed32." + error;
                }
            }
            if (message.sfixed64 != null && message.hasOwnProperty("sfixed64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.SFixed64Rules.verify(message.sfixed64);
                    if (error)
                        return "sfixed64." + error;
                }
            }
            if (message.bool != null && message.hasOwnProperty("bool")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.BoolRules.verify(message.bool);
                    if (error)
                        return "bool." + error;
                }
            }
            if (message.string != null && message.hasOwnProperty("string")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.StringRules.verify(message.string);
                    if (error)
                        return "string." + error;
                }
            }
            if (message.bytes != null && message.hasOwnProperty("bytes")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.BytesRules.verify(message.bytes);
                    if (error)
                        return "bytes." + error;
                }
            }
            if (message["enum"] != null && message.hasOwnProperty("enum")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.EnumRules.verify(message["enum"]);
                    if (error)
                        return "enum." + error;
                }
            }
            if (message.repeated != null && message.hasOwnProperty("repeated")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.RepeatedRules.verify(message.repeated);
                    if (error)
                        return "repeated." + error;
                }
            }
            if (message.map != null && message.hasOwnProperty("map")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.MapRules.verify(message.map);
                    if (error)
                        return "map." + error;
                }
            }
            if (message.any != null && message.hasOwnProperty("any")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.AnyRules.verify(message.any);
                    if (error)
                        return "any." + error;
                }
            }
            if (message.duration != null && message.hasOwnProperty("duration")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.DurationRules.verify(message.duration);
                    if (error)
                        return "duration." + error;
                }
            }
            if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.TimestampRules.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
            }
            return null;
        };

        /**
         * Creates a FieldRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.FieldRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.FieldRules} FieldRules
         */
        FieldRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.FieldRules)
                return object;
            let message = new $root.validate.FieldRules();
            if (object.message != null) {
                if (typeof object.message !== "object")
                    throw TypeError(".validate.FieldRules.message: object expected");
                message.message = $root.validate.MessageRules.fromObject(object.message);
            }
            if (object.float != null) {
                if (typeof object.float !== "object")
                    throw TypeError(".validate.FieldRules.float: object expected");
                message.float = $root.validate.FloatRules.fromObject(object.float);
            }
            if (object.double != null) {
                if (typeof object.double !== "object")
                    throw TypeError(".validate.FieldRules.double: object expected");
                message.double = $root.validate.DoubleRules.fromObject(object.double);
            }
            if (object.int32 != null) {
                if (typeof object.int32 !== "object")
                    throw TypeError(".validate.FieldRules.int32: object expected");
                message.int32 = $root.validate.Int32Rules.fromObject(object.int32);
            }
            if (object.int64 != null) {
                if (typeof object.int64 !== "object")
                    throw TypeError(".validate.FieldRules.int64: object expected");
                message.int64 = $root.validate.Int64Rules.fromObject(object.int64);
            }
            if (object.uint32 != null) {
                if (typeof object.uint32 !== "object")
                    throw TypeError(".validate.FieldRules.uint32: object expected");
                message.uint32 = $root.validate.UInt32Rules.fromObject(object.uint32);
            }
            if (object.uint64 != null) {
                if (typeof object.uint64 !== "object")
                    throw TypeError(".validate.FieldRules.uint64: object expected");
                message.uint64 = $root.validate.UInt64Rules.fromObject(object.uint64);
            }
            if (object.sint32 != null) {
                if (typeof object.sint32 !== "object")
                    throw TypeError(".validate.FieldRules.sint32: object expected");
                message.sint32 = $root.validate.SInt32Rules.fromObject(object.sint32);
            }
            if (object.sint64 != null) {
                if (typeof object.sint64 !== "object")
                    throw TypeError(".validate.FieldRules.sint64: object expected");
                message.sint64 = $root.validate.SInt64Rules.fromObject(object.sint64);
            }
            if (object.fixed32 != null) {
                if (typeof object.fixed32 !== "object")
                    throw TypeError(".validate.FieldRules.fixed32: object expected");
                message.fixed32 = $root.validate.Fixed32Rules.fromObject(object.fixed32);
            }
            if (object.fixed64 != null) {
                if (typeof object.fixed64 !== "object")
                    throw TypeError(".validate.FieldRules.fixed64: object expected");
                message.fixed64 = $root.validate.Fixed64Rules.fromObject(object.fixed64);
            }
            if (object.sfixed32 != null) {
                if (typeof object.sfixed32 !== "object")
                    throw TypeError(".validate.FieldRules.sfixed32: object expected");
                message.sfixed32 = $root.validate.SFixed32Rules.fromObject(object.sfixed32);
            }
            if (object.sfixed64 != null) {
                if (typeof object.sfixed64 !== "object")
                    throw TypeError(".validate.FieldRules.sfixed64: object expected");
                message.sfixed64 = $root.validate.SFixed64Rules.fromObject(object.sfixed64);
            }
            if (object.bool != null) {
                if (typeof object.bool !== "object")
                    throw TypeError(".validate.FieldRules.bool: object expected");
                message.bool = $root.validate.BoolRules.fromObject(object.bool);
            }
            if (object.string != null) {
                if (typeof object.string !== "object")
                    throw TypeError(".validate.FieldRules.string: object expected");
                message.string = $root.validate.StringRules.fromObject(object.string);
            }
            if (object.bytes != null) {
                if (typeof object.bytes !== "object")
                    throw TypeError(".validate.FieldRules.bytes: object expected");
                message.bytes = $root.validate.BytesRules.fromObject(object.bytes);
            }
            if (object["enum"] != null) {
                if (typeof object["enum"] !== "object")
                    throw TypeError(".validate.FieldRules.enum: object expected");
                message["enum"] = $root.validate.EnumRules.fromObject(object["enum"]);
            }
            if (object.repeated != null) {
                if (typeof object.repeated !== "object")
                    throw TypeError(".validate.FieldRules.repeated: object expected");
                message.repeated = $root.validate.RepeatedRules.fromObject(object.repeated);
            }
            if (object.map != null) {
                if (typeof object.map !== "object")
                    throw TypeError(".validate.FieldRules.map: object expected");
                message.map = $root.validate.MapRules.fromObject(object.map);
            }
            if (object.any != null) {
                if (typeof object.any !== "object")
                    throw TypeError(".validate.FieldRules.any: object expected");
                message.any = $root.validate.AnyRules.fromObject(object.any);
            }
            if (object.duration != null) {
                if (typeof object.duration !== "object")
                    throw TypeError(".validate.FieldRules.duration: object expected");
                message.duration = $root.validate.DurationRules.fromObject(object.duration);
            }
            if (object.timestamp != null) {
                if (typeof object.timestamp !== "object")
                    throw TypeError(".validate.FieldRules.timestamp: object expected");
                message.timestamp = $root.validate.TimestampRules.fromObject(object.timestamp);
            }
            return message;
        };

        /**
         * Creates a plain object from a FieldRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.FieldRules
         * @static
         * @param {validate.FieldRules} message FieldRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FieldRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults)
                object.message = null;
            if (message.float != null && message.hasOwnProperty("float")) {
                object.float = $root.validate.FloatRules.toObject(message.float, options);
                if (options.oneofs)
                    object.type = "float";
            }
            if (message.double != null && message.hasOwnProperty("double")) {
                object.double = $root.validate.DoubleRules.toObject(message.double, options);
                if (options.oneofs)
                    object.type = "double";
            }
            if (message.int32 != null && message.hasOwnProperty("int32")) {
                object.int32 = $root.validate.Int32Rules.toObject(message.int32, options);
                if (options.oneofs)
                    object.type = "int32";
            }
            if (message.int64 != null && message.hasOwnProperty("int64")) {
                object.int64 = $root.validate.Int64Rules.toObject(message.int64, options);
                if (options.oneofs)
                    object.type = "int64";
            }
            if (message.uint32 != null && message.hasOwnProperty("uint32")) {
                object.uint32 = $root.validate.UInt32Rules.toObject(message.uint32, options);
                if (options.oneofs)
                    object.type = "uint32";
            }
            if (message.uint64 != null && message.hasOwnProperty("uint64")) {
                object.uint64 = $root.validate.UInt64Rules.toObject(message.uint64, options);
                if (options.oneofs)
                    object.type = "uint64";
            }
            if (message.sint32 != null && message.hasOwnProperty("sint32")) {
                object.sint32 = $root.validate.SInt32Rules.toObject(message.sint32, options);
                if (options.oneofs)
                    object.type = "sint32";
            }
            if (message.sint64 != null && message.hasOwnProperty("sint64")) {
                object.sint64 = $root.validate.SInt64Rules.toObject(message.sint64, options);
                if (options.oneofs)
                    object.type = "sint64";
            }
            if (message.fixed32 != null && message.hasOwnProperty("fixed32")) {
                object.fixed32 = $root.validate.Fixed32Rules.toObject(message.fixed32, options);
                if (options.oneofs)
                    object.type = "fixed32";
            }
            if (message.fixed64 != null && message.hasOwnProperty("fixed64")) {
                object.fixed64 = $root.validate.Fixed64Rules.toObject(message.fixed64, options);
                if (options.oneofs)
                    object.type = "fixed64";
            }
            if (message.sfixed32 != null && message.hasOwnProperty("sfixed32")) {
                object.sfixed32 = $root.validate.SFixed32Rules.toObject(message.sfixed32, options);
                if (options.oneofs)
                    object.type = "sfixed32";
            }
            if (message.sfixed64 != null && message.hasOwnProperty("sfixed64")) {
                object.sfixed64 = $root.validate.SFixed64Rules.toObject(message.sfixed64, options);
                if (options.oneofs)
                    object.type = "sfixed64";
            }
            if (message.bool != null && message.hasOwnProperty("bool")) {
                object.bool = $root.validate.BoolRules.toObject(message.bool, options);
                if (options.oneofs)
                    object.type = "bool";
            }
            if (message.string != null && message.hasOwnProperty("string")) {
                object.string = $root.validate.StringRules.toObject(message.string, options);
                if (options.oneofs)
                    object.type = "string";
            }
            if (message.bytes != null && message.hasOwnProperty("bytes")) {
                object.bytes = $root.validate.BytesRules.toObject(message.bytes, options);
                if (options.oneofs)
                    object.type = "bytes";
            }
            if (message["enum"] != null && message.hasOwnProperty("enum")) {
                object["enum"] = $root.validate.EnumRules.toObject(message["enum"], options);
                if (options.oneofs)
                    object.type = "enum";
            }
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = $root.validate.MessageRules.toObject(message.message, options);
            if (message.repeated != null && message.hasOwnProperty("repeated")) {
                object.repeated = $root.validate.RepeatedRules.toObject(message.repeated, options);
                if (options.oneofs)
                    object.type = "repeated";
            }
            if (message.map != null && message.hasOwnProperty("map")) {
                object.map = $root.validate.MapRules.toObject(message.map, options);
                if (options.oneofs)
                    object.type = "map";
            }
            if (message.any != null && message.hasOwnProperty("any")) {
                object.any = $root.validate.AnyRules.toObject(message.any, options);
                if (options.oneofs)
                    object.type = "any";
            }
            if (message.duration != null && message.hasOwnProperty("duration")) {
                object.duration = $root.validate.DurationRules.toObject(message.duration, options);
                if (options.oneofs)
                    object.type = "duration";
            }
            if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                object.timestamp = $root.validate.TimestampRules.toObject(message.timestamp, options);
                if (options.oneofs)
                    object.type = "timestamp";
            }
            return object;
        };

        /**
         * Converts this FieldRules to JSON.
         * @function toJSON
         * @memberof validate.FieldRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FieldRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FieldRules;
    })();

    validate.FloatRules = (function() {

        /**
         * Properties of a FloatRules.
         * @memberof validate
         * @interface IFloatRules
         * @property {number|null} ["const"] FloatRules const
         * @property {number|null} [lt] FloatRules lt
         * @property {number|null} [lte] FloatRules lte
         * @property {number|null} [gt] FloatRules gt
         * @property {number|null} [gte] FloatRules gte
         * @property {Array.<number>|null} ["in"] FloatRules in
         * @property {Array.<number>|null} [notIn] FloatRules notIn
         * @property {boolean|null} [ignoreEmpty] FloatRules ignoreEmpty
         */

        /**
         * Constructs a new FloatRules.
         * @memberof validate
         * @classdesc Represents a FloatRules.
         * @implements IFloatRules
         * @constructor
         * @param {validate.IFloatRules=} [properties] Properties to set
         */
        function FloatRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FloatRules const.
         * @member {number} const
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype["const"] = 0;

        /**
         * FloatRules lt.
         * @member {number} lt
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.lt = 0;

        /**
         * FloatRules lte.
         * @member {number} lte
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.lte = 0;

        /**
         * FloatRules gt.
         * @member {number} gt
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.gt = 0;

        /**
         * FloatRules gte.
         * @member {number} gte
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.gte = 0;

        /**
         * FloatRules in.
         * @member {Array.<number>} in
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype["in"] = $util.emptyArray;

        /**
         * FloatRules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.notIn = $util.emptyArray;

        /**
         * FloatRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.ignoreEmpty = false;

        /**
         * Verifies a FloatRules message.
         * @function verify
         * @memberof validate.FloatRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FloatRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] !== "number")
                    return "const: number expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt !== "number")
                    return "lt: number expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte !== "number")
                    return "lte: number expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt !== "number")
                    return "gt: number expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte !== "number")
                    return "gte: number expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (typeof message["in"][i] !== "number")
                        return "in: number[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (typeof message.notIn[i] !== "number")
                        return "notIn: number[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a FloatRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.FloatRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.FloatRules} FloatRules
         */
        FloatRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.FloatRules)
                return object;
            let message = new $root.validate.FloatRules();
            if (object["const"] != null)
                message["const"] = Number(object["const"]);
            if (object.lt != null)
                message.lt = Number(object.lt);
            if (object.lte != null)
                message.lte = Number(object.lte);
            if (object.gt != null)
                message.gt = Number(object.gt);
            if (object.gte != null)
                message.gte = Number(object.gte);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.FloatRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = Number(object["in"][i]);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.FloatRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = Number(object.notIn[i]);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a FloatRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.FloatRules
         * @static
         * @param {validate.FloatRules} message FloatRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FloatRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = options.json && !isFinite(message["const"]) ? String(message["const"]) : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = options.json && !isFinite(message.lt) ? String(message.lt) : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = options.json && !isFinite(message.lte) ? String(message.lte) : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = options.json && !isFinite(message.gt) ? String(message.gt) : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = options.json && !isFinite(message.gte) ? String(message.gte) : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = options.json && !isFinite(message["in"][j]) ? String(message["in"][j]) : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = options.json && !isFinite(message.notIn[j]) ? String(message.notIn[j]) : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this FloatRules to JSON.
         * @function toJSON
         * @memberof validate.FloatRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FloatRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FloatRules;
    })();

    validate.DoubleRules = (function() {

        /**
         * Properties of a DoubleRules.
         * @memberof validate
         * @interface IDoubleRules
         * @property {number|null} ["const"] DoubleRules const
         * @property {number|null} [lt] DoubleRules lt
         * @property {number|null} [lte] DoubleRules lte
         * @property {number|null} [gt] DoubleRules gt
         * @property {number|null} [gte] DoubleRules gte
         * @property {Array.<number>|null} ["in"] DoubleRules in
         * @property {Array.<number>|null} [notIn] DoubleRules notIn
         * @property {boolean|null} [ignoreEmpty] DoubleRules ignoreEmpty
         */

        /**
         * Constructs a new DoubleRules.
         * @memberof validate
         * @classdesc Represents a DoubleRules.
         * @implements IDoubleRules
         * @constructor
         * @param {validate.IDoubleRules=} [properties] Properties to set
         */
        function DoubleRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DoubleRules const.
         * @member {number} const
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype["const"] = 0;

        /**
         * DoubleRules lt.
         * @member {number} lt
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.lt = 0;

        /**
         * DoubleRules lte.
         * @member {number} lte
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.lte = 0;

        /**
         * DoubleRules gt.
         * @member {number} gt
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.gt = 0;

        /**
         * DoubleRules gte.
         * @member {number} gte
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.gte = 0;

        /**
         * DoubleRules in.
         * @member {Array.<number>} in
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype["in"] = $util.emptyArray;

        /**
         * DoubleRules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.notIn = $util.emptyArray;

        /**
         * DoubleRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.ignoreEmpty = false;

        /**
         * Verifies a DoubleRules message.
         * @function verify
         * @memberof validate.DoubleRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DoubleRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] !== "number")
                    return "const: number expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt !== "number")
                    return "lt: number expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte !== "number")
                    return "lte: number expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt !== "number")
                    return "gt: number expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte !== "number")
                    return "gte: number expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (typeof message["in"][i] !== "number")
                        return "in: number[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (typeof message.notIn[i] !== "number")
                        return "notIn: number[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a DoubleRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.DoubleRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.DoubleRules} DoubleRules
         */
        DoubleRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.DoubleRules)
                return object;
            let message = new $root.validate.DoubleRules();
            if (object["const"] != null)
                message["const"] = Number(object["const"]);
            if (object.lt != null)
                message.lt = Number(object.lt);
            if (object.lte != null)
                message.lte = Number(object.lte);
            if (object.gt != null)
                message.gt = Number(object.gt);
            if (object.gte != null)
                message.gte = Number(object.gte);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.DoubleRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = Number(object["in"][i]);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.DoubleRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = Number(object.notIn[i]);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a DoubleRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.DoubleRules
         * @static
         * @param {validate.DoubleRules} message DoubleRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DoubleRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = options.json && !isFinite(message["const"]) ? String(message["const"]) : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = options.json && !isFinite(message.lt) ? String(message.lt) : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = options.json && !isFinite(message.lte) ? String(message.lte) : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = options.json && !isFinite(message.gt) ? String(message.gt) : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = options.json && !isFinite(message.gte) ? String(message.gte) : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = options.json && !isFinite(message["in"][j]) ? String(message["in"][j]) : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = options.json && !isFinite(message.notIn[j]) ? String(message.notIn[j]) : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this DoubleRules to JSON.
         * @function toJSON
         * @memberof validate.DoubleRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DoubleRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DoubleRules;
    })();

    validate.Int32Rules = (function() {

        /**
         * Properties of an Int32Rules.
         * @memberof validate
         * @interface IInt32Rules
         * @property {number|null} ["const"] Int32Rules const
         * @property {number|null} [lt] Int32Rules lt
         * @property {number|null} [lte] Int32Rules lte
         * @property {number|null} [gt] Int32Rules gt
         * @property {number|null} [gte] Int32Rules gte
         * @property {Array.<number>|null} ["in"] Int32Rules in
         * @property {Array.<number>|null} [notIn] Int32Rules notIn
         * @property {boolean|null} [ignoreEmpty] Int32Rules ignoreEmpty
         */

        /**
         * Constructs a new Int32Rules.
         * @memberof validate
         * @classdesc Represents an Int32Rules.
         * @implements IInt32Rules
         * @constructor
         * @param {validate.IInt32Rules=} [properties] Properties to set
         */
        function Int32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Int32Rules const.
         * @member {number} const
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype["const"] = 0;

        /**
         * Int32Rules lt.
         * @member {number} lt
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.lt = 0;

        /**
         * Int32Rules lte.
         * @member {number} lte
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.lte = 0;

        /**
         * Int32Rules gt.
         * @member {number} gt
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.gt = 0;

        /**
         * Int32Rules gte.
         * @member {number} gte
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.gte = 0;

        /**
         * Int32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype["in"] = $util.emptyArray;

        /**
         * Int32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.notIn = $util.emptyArray;

        /**
         * Int32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies an Int32Rules message.
         * @function verify
         * @memberof validate.Int32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Int32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates an Int32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.Int32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.Int32Rules} Int32Rules
         */
        Int32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.Int32Rules)
                return object;
            let message = new $root.validate.Int32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] | 0;
            if (object.lt != null)
                message.lt = object.lt | 0;
            if (object.lte != null)
                message.lte = object.lte | 0;
            if (object.gt != null)
                message.gt = object.gt | 0;
            if (object.gte != null)
                message.gte = object.gte | 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.Int32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] | 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.Int32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] | 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from an Int32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.Int32Rules
         * @static
         * @param {validate.Int32Rules} message Int32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Int32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this Int32Rules to JSON.
         * @function toJSON
         * @memberof validate.Int32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Int32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Int32Rules;
    })();

    validate.Int64Rules = (function() {

        /**
         * Properties of an Int64Rules.
         * @memberof validate
         * @interface IInt64Rules
         * @property {number|Long|null} ["const"] Int64Rules const
         * @property {number|Long|null} [lt] Int64Rules lt
         * @property {number|Long|null} [lte] Int64Rules lte
         * @property {number|Long|null} [gt] Int64Rules gt
         * @property {number|Long|null} [gte] Int64Rules gte
         * @property {Array.<number|Long>|null} ["in"] Int64Rules in
         * @property {Array.<number|Long>|null} [notIn] Int64Rules notIn
         * @property {boolean|null} [ignoreEmpty] Int64Rules ignoreEmpty
         */

        /**
         * Constructs a new Int64Rules.
         * @memberof validate
         * @classdesc Represents an Int64Rules.
         * @implements IInt64Rules
         * @constructor
         * @param {validate.IInt64Rules=} [properties] Properties to set
         */
        function Int64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Int64Rules const.
         * @member {number|Long} const
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype["in"] = $util.emptyArray;

        /**
         * Int64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.notIn = $util.emptyArray;

        /**
         * Int64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies an Int64Rules message.
         * @function verify
         * @memberof validate.Int64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Int64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates an Int64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.Int64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.Int64Rules} Int64Rules
         */
        Int64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.Int64Rules)
                return object;
            let message = new $root.validate.Int64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.Int64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.Int64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from an Int64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.Int64Rules
         * @static
         * @param {validate.Int64Rules} message Int64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Int64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this Int64Rules to JSON.
         * @function toJSON
         * @memberof validate.Int64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Int64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Int64Rules;
    })();

    validate.UInt32Rules = (function() {

        /**
         * Properties of a UInt32Rules.
         * @memberof validate
         * @interface IUInt32Rules
         * @property {number|null} ["const"] UInt32Rules const
         * @property {number|null} [lt] UInt32Rules lt
         * @property {number|null} [lte] UInt32Rules lte
         * @property {number|null} [gt] UInt32Rules gt
         * @property {number|null} [gte] UInt32Rules gte
         * @property {Array.<number>|null} ["in"] UInt32Rules in
         * @property {Array.<number>|null} [notIn] UInt32Rules notIn
         * @property {boolean|null} [ignoreEmpty] UInt32Rules ignoreEmpty
         */

        /**
         * Constructs a new UInt32Rules.
         * @memberof validate
         * @classdesc Represents a UInt32Rules.
         * @implements IUInt32Rules
         * @constructor
         * @param {validate.IUInt32Rules=} [properties] Properties to set
         */
        function UInt32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UInt32Rules const.
         * @member {number} const
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype["const"] = 0;

        /**
         * UInt32Rules lt.
         * @member {number} lt
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.lt = 0;

        /**
         * UInt32Rules lte.
         * @member {number} lte
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.lte = 0;

        /**
         * UInt32Rules gt.
         * @member {number} gt
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.gt = 0;

        /**
         * UInt32Rules gte.
         * @member {number} gte
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.gte = 0;

        /**
         * UInt32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype["in"] = $util.emptyArray;

        /**
         * UInt32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.notIn = $util.emptyArray;

        /**
         * UInt32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a UInt32Rules message.
         * @function verify
         * @memberof validate.UInt32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UInt32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a UInt32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.UInt32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.UInt32Rules} UInt32Rules
         */
        UInt32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.UInt32Rules)
                return object;
            let message = new $root.validate.UInt32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] >>> 0;
            if (object.lt != null)
                message.lt = object.lt >>> 0;
            if (object.lte != null)
                message.lte = object.lte >>> 0;
            if (object.gt != null)
                message.gt = object.gt >>> 0;
            if (object.gte != null)
                message.gte = object.gte >>> 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.UInt32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] >>> 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.UInt32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] >>> 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a UInt32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.UInt32Rules
         * @static
         * @param {validate.UInt32Rules} message UInt32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UInt32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this UInt32Rules to JSON.
         * @function toJSON
         * @memberof validate.UInt32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UInt32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UInt32Rules;
    })();

    validate.UInt64Rules = (function() {

        /**
         * Properties of a UInt64Rules.
         * @memberof validate
         * @interface IUInt64Rules
         * @property {number|Long|null} ["const"] UInt64Rules const
         * @property {number|Long|null} [lt] UInt64Rules lt
         * @property {number|Long|null} [lte] UInt64Rules lte
         * @property {number|Long|null} [gt] UInt64Rules gt
         * @property {number|Long|null} [gte] UInt64Rules gte
         * @property {Array.<number|Long>|null} ["in"] UInt64Rules in
         * @property {Array.<number|Long>|null} [notIn] UInt64Rules notIn
         * @property {boolean|null} [ignoreEmpty] UInt64Rules ignoreEmpty
         */

        /**
         * Constructs a new UInt64Rules.
         * @memberof validate
         * @classdesc Represents a UInt64Rules.
         * @implements IUInt64Rules
         * @constructor
         * @param {validate.IUInt64Rules=} [properties] Properties to set
         */
        function UInt64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UInt64Rules const.
         * @member {number|Long} const
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype["in"] = $util.emptyArray;

        /**
         * UInt64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.notIn = $util.emptyArray;

        /**
         * UInt64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a UInt64Rules message.
         * @function verify
         * @memberof validate.UInt64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UInt64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a UInt64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.UInt64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.UInt64Rules} UInt64Rules
         */
        UInt64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.UInt64Rules)
                return object;
            let message = new $root.validate.UInt64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = true;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber(true);
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = true;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber(true);
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = true;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber(true);
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = true;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber(true);
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = true;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber(true);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.UInt64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = true;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber(true);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.UInt64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = true;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber(true);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a UInt64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.UInt64Rules
         * @static
         * @param {validate.UInt64Rules} message UInt64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UInt64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber(true) : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber(true) : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber(true) : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber(true) : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber(true) : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber(true) : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber(true) : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this UInt64Rules to JSON.
         * @function toJSON
         * @memberof validate.UInt64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UInt64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UInt64Rules;
    })();

    validate.SInt32Rules = (function() {

        /**
         * Properties of a SInt32Rules.
         * @memberof validate
         * @interface ISInt32Rules
         * @property {number|null} ["const"] SInt32Rules const
         * @property {number|null} [lt] SInt32Rules lt
         * @property {number|null} [lte] SInt32Rules lte
         * @property {number|null} [gt] SInt32Rules gt
         * @property {number|null} [gte] SInt32Rules gte
         * @property {Array.<number>|null} ["in"] SInt32Rules in
         * @property {Array.<number>|null} [notIn] SInt32Rules notIn
         * @property {boolean|null} [ignoreEmpty] SInt32Rules ignoreEmpty
         */

        /**
         * Constructs a new SInt32Rules.
         * @memberof validate
         * @classdesc Represents a SInt32Rules.
         * @implements ISInt32Rules
         * @constructor
         * @param {validate.ISInt32Rules=} [properties] Properties to set
         */
        function SInt32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SInt32Rules const.
         * @member {number} const
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype["const"] = 0;

        /**
         * SInt32Rules lt.
         * @member {number} lt
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.lt = 0;

        /**
         * SInt32Rules lte.
         * @member {number} lte
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.lte = 0;

        /**
         * SInt32Rules gt.
         * @member {number} gt
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.gt = 0;

        /**
         * SInt32Rules gte.
         * @member {number} gte
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.gte = 0;

        /**
         * SInt32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype["in"] = $util.emptyArray;

        /**
         * SInt32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.notIn = $util.emptyArray;

        /**
         * SInt32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a SInt32Rules message.
         * @function verify
         * @memberof validate.SInt32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SInt32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a SInt32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.SInt32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.SInt32Rules} SInt32Rules
         */
        SInt32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.SInt32Rules)
                return object;
            let message = new $root.validate.SInt32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] | 0;
            if (object.lt != null)
                message.lt = object.lt | 0;
            if (object.lte != null)
                message.lte = object.lte | 0;
            if (object.gt != null)
                message.gt = object.gt | 0;
            if (object.gte != null)
                message.gte = object.gte | 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.SInt32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] | 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.SInt32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] | 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a SInt32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.SInt32Rules
         * @static
         * @param {validate.SInt32Rules} message SInt32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SInt32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this SInt32Rules to JSON.
         * @function toJSON
         * @memberof validate.SInt32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SInt32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SInt32Rules;
    })();

    validate.SInt64Rules = (function() {

        /**
         * Properties of a SInt64Rules.
         * @memberof validate
         * @interface ISInt64Rules
         * @property {number|Long|null} ["const"] SInt64Rules const
         * @property {number|Long|null} [lt] SInt64Rules lt
         * @property {number|Long|null} [lte] SInt64Rules lte
         * @property {number|Long|null} [gt] SInt64Rules gt
         * @property {number|Long|null} [gte] SInt64Rules gte
         * @property {Array.<number|Long>|null} ["in"] SInt64Rules in
         * @property {Array.<number|Long>|null} [notIn] SInt64Rules notIn
         * @property {boolean|null} [ignoreEmpty] SInt64Rules ignoreEmpty
         */

        /**
         * Constructs a new SInt64Rules.
         * @memberof validate
         * @classdesc Represents a SInt64Rules.
         * @implements ISInt64Rules
         * @constructor
         * @param {validate.ISInt64Rules=} [properties] Properties to set
         */
        function SInt64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SInt64Rules const.
         * @member {number|Long} const
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype["in"] = $util.emptyArray;

        /**
         * SInt64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.notIn = $util.emptyArray;

        /**
         * SInt64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a SInt64Rules message.
         * @function verify
         * @memberof validate.SInt64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SInt64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a SInt64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.SInt64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.SInt64Rules} SInt64Rules
         */
        SInt64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.SInt64Rules)
                return object;
            let message = new $root.validate.SInt64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.SInt64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.SInt64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a SInt64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.SInt64Rules
         * @static
         * @param {validate.SInt64Rules} message SInt64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SInt64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this SInt64Rules to JSON.
         * @function toJSON
         * @memberof validate.SInt64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SInt64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SInt64Rules;
    })();

    validate.Fixed32Rules = (function() {

        /**
         * Properties of a Fixed32Rules.
         * @memberof validate
         * @interface IFixed32Rules
         * @property {number|null} ["const"] Fixed32Rules const
         * @property {number|null} [lt] Fixed32Rules lt
         * @property {number|null} [lte] Fixed32Rules lte
         * @property {number|null} [gt] Fixed32Rules gt
         * @property {number|null} [gte] Fixed32Rules gte
         * @property {Array.<number>|null} ["in"] Fixed32Rules in
         * @property {Array.<number>|null} [notIn] Fixed32Rules notIn
         * @property {boolean|null} [ignoreEmpty] Fixed32Rules ignoreEmpty
         */

        /**
         * Constructs a new Fixed32Rules.
         * @memberof validate
         * @classdesc Represents a Fixed32Rules.
         * @implements IFixed32Rules
         * @constructor
         * @param {validate.IFixed32Rules=} [properties] Properties to set
         */
        function Fixed32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Fixed32Rules const.
         * @member {number} const
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype["const"] = 0;

        /**
         * Fixed32Rules lt.
         * @member {number} lt
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.lt = 0;

        /**
         * Fixed32Rules lte.
         * @member {number} lte
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.lte = 0;

        /**
         * Fixed32Rules gt.
         * @member {number} gt
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.gt = 0;

        /**
         * Fixed32Rules gte.
         * @member {number} gte
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.gte = 0;

        /**
         * Fixed32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype["in"] = $util.emptyArray;

        /**
         * Fixed32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.notIn = $util.emptyArray;

        /**
         * Fixed32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a Fixed32Rules message.
         * @function verify
         * @memberof validate.Fixed32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Fixed32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a Fixed32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.Fixed32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.Fixed32Rules} Fixed32Rules
         */
        Fixed32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.Fixed32Rules)
                return object;
            let message = new $root.validate.Fixed32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] >>> 0;
            if (object.lt != null)
                message.lt = object.lt >>> 0;
            if (object.lte != null)
                message.lte = object.lte >>> 0;
            if (object.gt != null)
                message.gt = object.gt >>> 0;
            if (object.gte != null)
                message.gte = object.gte >>> 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.Fixed32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] >>> 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.Fixed32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] >>> 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a Fixed32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.Fixed32Rules
         * @static
         * @param {validate.Fixed32Rules} message Fixed32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Fixed32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this Fixed32Rules to JSON.
         * @function toJSON
         * @memberof validate.Fixed32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Fixed32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Fixed32Rules;
    })();

    validate.Fixed64Rules = (function() {

        /**
         * Properties of a Fixed64Rules.
         * @memberof validate
         * @interface IFixed64Rules
         * @property {number|Long|null} ["const"] Fixed64Rules const
         * @property {number|Long|null} [lt] Fixed64Rules lt
         * @property {number|Long|null} [lte] Fixed64Rules lte
         * @property {number|Long|null} [gt] Fixed64Rules gt
         * @property {number|Long|null} [gte] Fixed64Rules gte
         * @property {Array.<number|Long>|null} ["in"] Fixed64Rules in
         * @property {Array.<number|Long>|null} [notIn] Fixed64Rules notIn
         * @property {boolean|null} [ignoreEmpty] Fixed64Rules ignoreEmpty
         */

        /**
         * Constructs a new Fixed64Rules.
         * @memberof validate
         * @classdesc Represents a Fixed64Rules.
         * @implements IFixed64Rules
         * @constructor
         * @param {validate.IFixed64Rules=} [properties] Properties to set
         */
        function Fixed64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Fixed64Rules const.
         * @member {number|Long} const
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype["in"] = $util.emptyArray;

        /**
         * Fixed64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.notIn = $util.emptyArray;

        /**
         * Fixed64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a Fixed64Rules message.
         * @function verify
         * @memberof validate.Fixed64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Fixed64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a Fixed64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.Fixed64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.Fixed64Rules} Fixed64Rules
         */
        Fixed64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.Fixed64Rules)
                return object;
            let message = new $root.validate.Fixed64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.Fixed64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.Fixed64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a Fixed64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.Fixed64Rules
         * @static
         * @param {validate.Fixed64Rules} message Fixed64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Fixed64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this Fixed64Rules to JSON.
         * @function toJSON
         * @memberof validate.Fixed64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Fixed64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Fixed64Rules;
    })();

    validate.SFixed32Rules = (function() {

        /**
         * Properties of a SFixed32Rules.
         * @memberof validate
         * @interface ISFixed32Rules
         * @property {number|null} ["const"] SFixed32Rules const
         * @property {number|null} [lt] SFixed32Rules lt
         * @property {number|null} [lte] SFixed32Rules lte
         * @property {number|null} [gt] SFixed32Rules gt
         * @property {number|null} [gte] SFixed32Rules gte
         * @property {Array.<number>|null} ["in"] SFixed32Rules in
         * @property {Array.<number>|null} [notIn] SFixed32Rules notIn
         * @property {boolean|null} [ignoreEmpty] SFixed32Rules ignoreEmpty
         */

        /**
         * Constructs a new SFixed32Rules.
         * @memberof validate
         * @classdesc Represents a SFixed32Rules.
         * @implements ISFixed32Rules
         * @constructor
         * @param {validate.ISFixed32Rules=} [properties] Properties to set
         */
        function SFixed32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SFixed32Rules const.
         * @member {number} const
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype["const"] = 0;

        /**
         * SFixed32Rules lt.
         * @member {number} lt
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.lt = 0;

        /**
         * SFixed32Rules lte.
         * @member {number} lte
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.lte = 0;

        /**
         * SFixed32Rules gt.
         * @member {number} gt
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.gt = 0;

        /**
         * SFixed32Rules gte.
         * @member {number} gte
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.gte = 0;

        /**
         * SFixed32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype["in"] = $util.emptyArray;

        /**
         * SFixed32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.notIn = $util.emptyArray;

        /**
         * SFixed32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a SFixed32Rules message.
         * @function verify
         * @memberof validate.SFixed32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SFixed32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a SFixed32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.SFixed32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.SFixed32Rules} SFixed32Rules
         */
        SFixed32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.SFixed32Rules)
                return object;
            let message = new $root.validate.SFixed32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] | 0;
            if (object.lt != null)
                message.lt = object.lt | 0;
            if (object.lte != null)
                message.lte = object.lte | 0;
            if (object.gt != null)
                message.gt = object.gt | 0;
            if (object.gte != null)
                message.gte = object.gte | 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.SFixed32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] | 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.SFixed32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] | 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a SFixed32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.SFixed32Rules
         * @static
         * @param {validate.SFixed32Rules} message SFixed32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SFixed32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this SFixed32Rules to JSON.
         * @function toJSON
         * @memberof validate.SFixed32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SFixed32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SFixed32Rules;
    })();

    validate.SFixed64Rules = (function() {

        /**
         * Properties of a SFixed64Rules.
         * @memberof validate
         * @interface ISFixed64Rules
         * @property {number|Long|null} ["const"] SFixed64Rules const
         * @property {number|Long|null} [lt] SFixed64Rules lt
         * @property {number|Long|null} [lte] SFixed64Rules lte
         * @property {number|Long|null} [gt] SFixed64Rules gt
         * @property {number|Long|null} [gte] SFixed64Rules gte
         * @property {Array.<number|Long>|null} ["in"] SFixed64Rules in
         * @property {Array.<number|Long>|null} [notIn] SFixed64Rules notIn
         * @property {boolean|null} [ignoreEmpty] SFixed64Rules ignoreEmpty
         */

        /**
         * Constructs a new SFixed64Rules.
         * @memberof validate
         * @classdesc Represents a SFixed64Rules.
         * @implements ISFixed64Rules
         * @constructor
         * @param {validate.ISFixed64Rules=} [properties] Properties to set
         */
        function SFixed64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SFixed64Rules const.
         * @member {number|Long} const
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype["in"] = $util.emptyArray;

        /**
         * SFixed64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.notIn = $util.emptyArray;

        /**
         * SFixed64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a SFixed64Rules message.
         * @function verify
         * @memberof validate.SFixed64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SFixed64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a SFixed64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.SFixed64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.SFixed64Rules} SFixed64Rules
         */
        SFixed64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.SFixed64Rules)
                return object;
            let message = new $root.validate.SFixed64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.SFixed64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.SFixed64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a SFixed64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.SFixed64Rules
         * @static
         * @param {validate.SFixed64Rules} message SFixed64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SFixed64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this SFixed64Rules to JSON.
         * @function toJSON
         * @memberof validate.SFixed64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SFixed64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SFixed64Rules;
    })();

    validate.BoolRules = (function() {

        /**
         * Properties of a BoolRules.
         * @memberof validate
         * @interface IBoolRules
         * @property {boolean|null} ["const"] BoolRules const
         */

        /**
         * Constructs a new BoolRules.
         * @memberof validate
         * @classdesc Represents a BoolRules.
         * @implements IBoolRules
         * @constructor
         * @param {validate.IBoolRules=} [properties] Properties to set
         */
        function BoolRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BoolRules const.
         * @member {boolean} const
         * @memberof validate.BoolRules
         * @instance
         */
        BoolRules.prototype["const"] = false;

        /**
         * Verifies a BoolRules message.
         * @function verify
         * @memberof validate.BoolRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BoolRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] !== "boolean")
                    return "const: boolean expected";
            return null;
        };

        /**
         * Creates a BoolRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.BoolRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.BoolRules} BoolRules
         */
        BoolRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.BoolRules)
                return object;
            let message = new $root.validate.BoolRules();
            if (object["const"] != null)
                message["const"] = Boolean(object["const"]);
            return message;
        };

        /**
         * Creates a plain object from a BoolRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.BoolRules
         * @static
         * @param {validate.BoolRules} message BoolRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BoolRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults)
                object["const"] = false;
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            return object;
        };

        /**
         * Converts this BoolRules to JSON.
         * @function toJSON
         * @memberof validate.BoolRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BoolRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BoolRules;
    })();

    validate.StringRules = (function() {

        /**
         * Properties of a StringRules.
         * @memberof validate
         * @interface IStringRules
         * @property {string|null} ["const"] StringRules const
         * @property {number|Long|null} [len] StringRules len
         * @property {number|Long|null} [minLen] StringRules minLen
         * @property {number|Long|null} [maxLen] StringRules maxLen
         * @property {number|Long|null} [lenBytes] StringRules lenBytes
         * @property {number|Long|null} [minBytes] StringRules minBytes
         * @property {number|Long|null} [maxBytes] StringRules maxBytes
         * @property {string|null} [pattern] StringRules pattern
         * @property {string|null} [prefix] StringRules prefix
         * @property {string|null} [suffix] StringRules suffix
         * @property {string|null} [contains] StringRules contains
         * @property {string|null} [notContains] StringRules notContains
         * @property {Array.<string>|null} ["in"] StringRules in
         * @property {Array.<string>|null} [notIn] StringRules notIn
         * @property {boolean|null} [email] StringRules email
         * @property {boolean|null} [hostname] StringRules hostname
         * @property {boolean|null} [ip] StringRules ip
         * @property {boolean|null} [ipv4] StringRules ipv4
         * @property {boolean|null} [ipv6] StringRules ipv6
         * @property {boolean|null} [uri] StringRules uri
         * @property {boolean|null} [uriRef] StringRules uriRef
         * @property {boolean|null} [address] StringRules address
         * @property {boolean|null} [uuid] StringRules uuid
         * @property {validate.KnownRegex|null} [wellKnownRegex] StringRules wellKnownRegex
         * @property {boolean|null} [strict] StringRules strict
         * @property {boolean|null} [ignoreEmpty] StringRules ignoreEmpty
         */

        /**
         * Constructs a new StringRules.
         * @memberof validate
         * @classdesc Represents a StringRules.
         * @implements IStringRules
         * @constructor
         * @param {validate.IStringRules=} [properties] Properties to set
         */
        function StringRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StringRules const.
         * @member {string} const
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype["const"] = "";

        /**
         * StringRules len.
         * @member {number|Long} len
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.len = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules minLen.
         * @member {number|Long} minLen
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.minLen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules maxLen.
         * @member {number|Long} maxLen
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.maxLen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules lenBytes.
         * @member {number|Long} lenBytes
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.lenBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules minBytes.
         * @member {number|Long} minBytes
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.minBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules maxBytes.
         * @member {number|Long} maxBytes
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.maxBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules pattern.
         * @member {string} pattern
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.pattern = "";

        /**
         * StringRules prefix.
         * @member {string} prefix
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.prefix = "";

        /**
         * StringRules suffix.
         * @member {string} suffix
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.suffix = "";

        /**
         * StringRules contains.
         * @member {string} contains
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.contains = "";

        /**
         * StringRules notContains.
         * @member {string} notContains
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.notContains = "";

        /**
         * StringRules in.
         * @member {Array.<string>} in
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype["in"] = $util.emptyArray;

        /**
         * StringRules notIn.
         * @member {Array.<string>} notIn
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.notIn = $util.emptyArray;

        /**
         * StringRules email.
         * @member {boolean|null|undefined} email
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.email = null;

        /**
         * StringRules hostname.
         * @member {boolean|null|undefined} hostname
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.hostname = null;

        /**
         * StringRules ip.
         * @member {boolean|null|undefined} ip
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.ip = null;

        /**
         * StringRules ipv4.
         * @member {boolean|null|undefined} ipv4
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.ipv4 = null;

        /**
         * StringRules ipv6.
         * @member {boolean|null|undefined} ipv6
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.ipv6 = null;

        /**
         * StringRules uri.
         * @member {boolean|null|undefined} uri
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.uri = null;

        /**
         * StringRules uriRef.
         * @member {boolean|null|undefined} uriRef
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.uriRef = null;

        /**
         * StringRules address.
         * @member {boolean|null|undefined} address
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.address = null;

        /**
         * StringRules uuid.
         * @member {boolean|null|undefined} uuid
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.uuid = null;

        /**
         * StringRules wellKnownRegex.
         * @member {validate.KnownRegex|null|undefined} wellKnownRegex
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.wellKnownRegex = null;

        /**
         * StringRules strict.
         * @member {boolean} strict
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.strict = true;

        /**
         * StringRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.ignoreEmpty = false;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * StringRules wellKnown.
         * @member {"email"|"hostname"|"ip"|"ipv4"|"ipv6"|"uri"|"uriRef"|"address"|"uuid"|"wellKnownRegex"|undefined} wellKnown
         * @memberof validate.StringRules
         * @instance
         */
        Object.defineProperty(StringRules.prototype, "wellKnown", {
            get: $util.oneOfGetter($oneOfFields = ["email", "hostname", "ip", "ipv4", "ipv6", "uri", "uriRef", "address", "uuid", "wellKnownRegex"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Verifies a StringRules message.
         * @function verify
         * @memberof validate.StringRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StringRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isString(message["const"]))
                    return "const: string expected";
            if (message.len != null && message.hasOwnProperty("len"))
                if (!$util.isInteger(message.len) && !(message.len && $util.isInteger(message.len.low) && $util.isInteger(message.len.high)))
                    return "len: integer|Long expected";
            if (message.minLen != null && message.hasOwnProperty("minLen"))
                if (!$util.isInteger(message.minLen) && !(message.minLen && $util.isInteger(message.minLen.low) && $util.isInteger(message.minLen.high)))
                    return "minLen: integer|Long expected";
            if (message.maxLen != null && message.hasOwnProperty("maxLen"))
                if (!$util.isInteger(message.maxLen) && !(message.maxLen && $util.isInteger(message.maxLen.low) && $util.isInteger(message.maxLen.high)))
                    return "maxLen: integer|Long expected";
            if (message.lenBytes != null && message.hasOwnProperty("lenBytes"))
                if (!$util.isInteger(message.lenBytes) && !(message.lenBytes && $util.isInteger(message.lenBytes.low) && $util.isInteger(message.lenBytes.high)))
                    return "lenBytes: integer|Long expected";
            if (message.minBytes != null && message.hasOwnProperty("minBytes"))
                if (!$util.isInteger(message.minBytes) && !(message.minBytes && $util.isInteger(message.minBytes.low) && $util.isInteger(message.minBytes.high)))
                    return "minBytes: integer|Long expected";
            if (message.maxBytes != null && message.hasOwnProperty("maxBytes"))
                if (!$util.isInteger(message.maxBytes) && !(message.maxBytes && $util.isInteger(message.maxBytes.low) && $util.isInteger(message.maxBytes.high)))
                    return "maxBytes: integer|Long expected";
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                if (!$util.isString(message.pattern))
                    return "pattern: string expected";
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                if (!$util.isString(message.prefix))
                    return "prefix: string expected";
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                if (!$util.isString(message.suffix))
                    return "suffix: string expected";
            if (message.contains != null && message.hasOwnProperty("contains"))
                if (!$util.isString(message.contains))
                    return "contains: string expected";
            if (message.notContains != null && message.hasOwnProperty("notContains"))
                if (!$util.isString(message.notContains))
                    return "notContains: string expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isString(message["in"][i]))
                        return "in: string[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isString(message.notIn[i]))
                        return "notIn: string[] expected";
            }
            if (message.email != null && message.hasOwnProperty("email")) {
                properties.wellKnown = 1;
                if (typeof message.email !== "boolean")
                    return "email: boolean expected";
            }
            if (message.hostname != null && message.hasOwnProperty("hostname")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.hostname !== "boolean")
                    return "hostname: boolean expected";
            }
            if (message.ip != null && message.hasOwnProperty("ip")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ip !== "boolean")
                    return "ip: boolean expected";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ipv4 !== "boolean")
                    return "ipv4: boolean expected";
            }
            if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ipv6 !== "boolean")
                    return "ipv6: boolean expected";
            }
            if (message.uri != null && message.hasOwnProperty("uri")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.uri !== "boolean")
                    return "uri: boolean expected";
            }
            if (message.uriRef != null && message.hasOwnProperty("uriRef")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.uriRef !== "boolean")
                    return "uriRef: boolean expected";
            }
            if (message.address != null && message.hasOwnProperty("address")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.address !== "boolean")
                    return "address: boolean expected";
            }
            if (message.uuid != null && message.hasOwnProperty("uuid")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.uuid !== "boolean")
                    return "uuid: boolean expected";
            }
            if (message.wellKnownRegex != null && message.hasOwnProperty("wellKnownRegex")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                switch (message.wellKnownRegex) {
                default:
                    return "wellKnownRegex: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (message.strict != null && message.hasOwnProperty("strict"))
                if (typeof message.strict !== "boolean")
                    return "strict: boolean expected";
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a StringRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.StringRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.StringRules} StringRules
         */
        StringRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.StringRules)
                return object;
            let message = new $root.validate.StringRules();
            if (object["const"] != null)
                message["const"] = String(object["const"]);
            if (object.len != null)
                if ($util.Long)
                    (message.len = $util.Long.fromValue(object.len)).unsigned = true;
                else if (typeof object.len === "string")
                    message.len = parseInt(object.len, 10);
                else if (typeof object.len === "number")
                    message.len = object.len;
                else if (typeof object.len === "object")
                    message.len = new $util.LongBits(object.len.low >>> 0, object.len.high >>> 0).toNumber(true);
            if (object.minLen != null)
                if ($util.Long)
                    (message.minLen = $util.Long.fromValue(object.minLen)).unsigned = true;
                else if (typeof object.minLen === "string")
                    message.minLen = parseInt(object.minLen, 10);
                else if (typeof object.minLen === "number")
                    message.minLen = object.minLen;
                else if (typeof object.minLen === "object")
                    message.minLen = new $util.LongBits(object.minLen.low >>> 0, object.minLen.high >>> 0).toNumber(true);
            if (object.maxLen != null)
                if ($util.Long)
                    (message.maxLen = $util.Long.fromValue(object.maxLen)).unsigned = true;
                else if (typeof object.maxLen === "string")
                    message.maxLen = parseInt(object.maxLen, 10);
                else if (typeof object.maxLen === "number")
                    message.maxLen = object.maxLen;
                else if (typeof object.maxLen === "object")
                    message.maxLen = new $util.LongBits(object.maxLen.low >>> 0, object.maxLen.high >>> 0).toNumber(true);
            if (object.lenBytes != null)
                if ($util.Long)
                    (message.lenBytes = $util.Long.fromValue(object.lenBytes)).unsigned = true;
                else if (typeof object.lenBytes === "string")
                    message.lenBytes = parseInt(object.lenBytes, 10);
                else if (typeof object.lenBytes === "number")
                    message.lenBytes = object.lenBytes;
                else if (typeof object.lenBytes === "object")
                    message.lenBytes = new $util.LongBits(object.lenBytes.low >>> 0, object.lenBytes.high >>> 0).toNumber(true);
            if (object.minBytes != null)
                if ($util.Long)
                    (message.minBytes = $util.Long.fromValue(object.minBytes)).unsigned = true;
                else if (typeof object.minBytes === "string")
                    message.minBytes = parseInt(object.minBytes, 10);
                else if (typeof object.minBytes === "number")
                    message.minBytes = object.minBytes;
                else if (typeof object.minBytes === "object")
                    message.minBytes = new $util.LongBits(object.minBytes.low >>> 0, object.minBytes.high >>> 0).toNumber(true);
            if (object.maxBytes != null)
                if ($util.Long)
                    (message.maxBytes = $util.Long.fromValue(object.maxBytes)).unsigned = true;
                else if (typeof object.maxBytes === "string")
                    message.maxBytes = parseInt(object.maxBytes, 10);
                else if (typeof object.maxBytes === "number")
                    message.maxBytes = object.maxBytes;
                else if (typeof object.maxBytes === "object")
                    message.maxBytes = new $util.LongBits(object.maxBytes.low >>> 0, object.maxBytes.high >>> 0).toNumber(true);
            if (object.pattern != null)
                message.pattern = String(object.pattern);
            if (object.prefix != null)
                message.prefix = String(object.prefix);
            if (object.suffix != null)
                message.suffix = String(object.suffix);
            if (object.contains != null)
                message.contains = String(object.contains);
            if (object.notContains != null)
                message.notContains = String(object.notContains);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.StringRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = String(object["in"][i]);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.StringRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = String(object.notIn[i]);
            }
            if (object.email != null)
                message.email = Boolean(object.email);
            if (object.hostname != null)
                message.hostname = Boolean(object.hostname);
            if (object.ip != null)
                message.ip = Boolean(object.ip);
            if (object.ipv4 != null)
                message.ipv4 = Boolean(object.ipv4);
            if (object.ipv6 != null)
                message.ipv6 = Boolean(object.ipv6);
            if (object.uri != null)
                message.uri = Boolean(object.uri);
            if (object.uriRef != null)
                message.uriRef = Boolean(object.uriRef);
            if (object.address != null)
                message.address = Boolean(object.address);
            if (object.uuid != null)
                message.uuid = Boolean(object.uuid);
            switch (object.wellKnownRegex) {
            case "UNKNOWN":
            case 0:
                message.wellKnownRegex = 0;
                break;
            case "HTTP_HEADER_NAME":
            case 1:
                message.wellKnownRegex = 1;
                break;
            case "HTTP_HEADER_VALUE":
            case 2:
                message.wellKnownRegex = 2;
                break;
            }
            if (object.strict != null)
                message.strict = Boolean(object.strict);
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a StringRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.StringRules
         * @static
         * @param {validate.StringRules} message StringRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StringRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = "";
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minLen = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minLen = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxLen = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxLen = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minBytes = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxBytes = options.longs === String ? "0" : 0;
                object.pattern = "";
                object.prefix = "";
                object.suffix = "";
                object.contains = "";
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.len = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.len = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.lenBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lenBytes = options.longs === String ? "0" : 0;
                object.notContains = "";
                object.strict = true;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.minLen != null && message.hasOwnProperty("minLen"))
                if (typeof message.minLen === "number")
                    object.minLen = options.longs === String ? String(message.minLen) : message.minLen;
                else
                    object.minLen = options.longs === String ? $util.Long.prototype.toString.call(message.minLen) : options.longs === Number ? new $util.LongBits(message.minLen.low >>> 0, message.minLen.high >>> 0).toNumber(true) : message.minLen;
            if (message.maxLen != null && message.hasOwnProperty("maxLen"))
                if (typeof message.maxLen === "number")
                    object.maxLen = options.longs === String ? String(message.maxLen) : message.maxLen;
                else
                    object.maxLen = options.longs === String ? $util.Long.prototype.toString.call(message.maxLen) : options.longs === Number ? new $util.LongBits(message.maxLen.low >>> 0, message.maxLen.high >>> 0).toNumber(true) : message.maxLen;
            if (message.minBytes != null && message.hasOwnProperty("minBytes"))
                if (typeof message.minBytes === "number")
                    object.minBytes = options.longs === String ? String(message.minBytes) : message.minBytes;
                else
                    object.minBytes = options.longs === String ? $util.Long.prototype.toString.call(message.minBytes) : options.longs === Number ? new $util.LongBits(message.minBytes.low >>> 0, message.minBytes.high >>> 0).toNumber(true) : message.minBytes;
            if (message.maxBytes != null && message.hasOwnProperty("maxBytes"))
                if (typeof message.maxBytes === "number")
                    object.maxBytes = options.longs === String ? String(message.maxBytes) : message.maxBytes;
                else
                    object.maxBytes = options.longs === String ? $util.Long.prototype.toString.call(message.maxBytes) : options.longs === Number ? new $util.LongBits(message.maxBytes.low >>> 0, message.maxBytes.high >>> 0).toNumber(true) : message.maxBytes;
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                object.pattern = message.pattern;
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                object.prefix = message.prefix;
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                object.suffix = message.suffix;
            if (message.contains != null && message.hasOwnProperty("contains"))
                object.contains = message.contains;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.email != null && message.hasOwnProperty("email")) {
                object.email = message.email;
                if (options.oneofs)
                    object.wellKnown = "email";
            }
            if (message.hostname != null && message.hasOwnProperty("hostname")) {
                object.hostname = message.hostname;
                if (options.oneofs)
                    object.wellKnown = "hostname";
            }
            if (message.ip != null && message.hasOwnProperty("ip")) {
                object.ip = message.ip;
                if (options.oneofs)
                    object.wellKnown = "ip";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                object.ipv4 = message.ipv4;
                if (options.oneofs)
                    object.wellKnown = "ipv4";
            }
            if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                object.ipv6 = message.ipv6;
                if (options.oneofs)
                    object.wellKnown = "ipv6";
            }
            if (message.uri != null && message.hasOwnProperty("uri")) {
                object.uri = message.uri;
                if (options.oneofs)
                    object.wellKnown = "uri";
            }
            if (message.uriRef != null && message.hasOwnProperty("uriRef")) {
                object.uriRef = message.uriRef;
                if (options.oneofs)
                    object.wellKnown = "uriRef";
            }
            if (message.len != null && message.hasOwnProperty("len"))
                if (typeof message.len === "number")
                    object.len = options.longs === String ? String(message.len) : message.len;
                else
                    object.len = options.longs === String ? $util.Long.prototype.toString.call(message.len) : options.longs === Number ? new $util.LongBits(message.len.low >>> 0, message.len.high >>> 0).toNumber(true) : message.len;
            if (message.lenBytes != null && message.hasOwnProperty("lenBytes"))
                if (typeof message.lenBytes === "number")
                    object.lenBytes = options.longs === String ? String(message.lenBytes) : message.lenBytes;
                else
                    object.lenBytes = options.longs === String ? $util.Long.prototype.toString.call(message.lenBytes) : options.longs === Number ? new $util.LongBits(message.lenBytes.low >>> 0, message.lenBytes.high >>> 0).toNumber(true) : message.lenBytes;
            if (message.address != null && message.hasOwnProperty("address")) {
                object.address = message.address;
                if (options.oneofs)
                    object.wellKnown = "address";
            }
            if (message.uuid != null && message.hasOwnProperty("uuid")) {
                object.uuid = message.uuid;
                if (options.oneofs)
                    object.wellKnown = "uuid";
            }
            if (message.notContains != null && message.hasOwnProperty("notContains"))
                object.notContains = message.notContains;
            if (message.wellKnownRegex != null && message.hasOwnProperty("wellKnownRegex")) {
                object.wellKnownRegex = options.enums === String ? $root.validate.KnownRegex[message.wellKnownRegex] : message.wellKnownRegex;
                if (options.oneofs)
                    object.wellKnown = "wellKnownRegex";
            }
            if (message.strict != null && message.hasOwnProperty("strict"))
                object.strict = message.strict;
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this StringRules to JSON.
         * @function toJSON
         * @memberof validate.StringRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StringRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StringRules;
    })();

    /**
     * KnownRegex enum.
     * @name validate.KnownRegex
     * @enum {number}
     * @property {number} UNKNOWN=0 UNKNOWN value
     * @property {number} HTTP_HEADER_NAME=1 HTTP_HEADER_NAME value
     * @property {number} HTTP_HEADER_VALUE=2 HTTP_HEADER_VALUE value
     */
    validate.KnownRegex = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "UNKNOWN"] = 0;
        values[valuesById[1] = "HTTP_HEADER_NAME"] = 1;
        values[valuesById[2] = "HTTP_HEADER_VALUE"] = 2;
        return values;
    })();

    validate.BytesRules = (function() {

        /**
         * Properties of a BytesRules.
         * @memberof validate
         * @interface IBytesRules
         * @property {Uint8Array|null} ["const"] BytesRules const
         * @property {number|Long|null} [len] BytesRules len
         * @property {number|Long|null} [minLen] BytesRules minLen
         * @property {number|Long|null} [maxLen] BytesRules maxLen
         * @property {string|null} [pattern] BytesRules pattern
         * @property {Uint8Array|null} [prefix] BytesRules prefix
         * @property {Uint8Array|null} [suffix] BytesRules suffix
         * @property {Uint8Array|null} [contains] BytesRules contains
         * @property {Array.<Uint8Array>|null} ["in"] BytesRules in
         * @property {Array.<Uint8Array>|null} [notIn] BytesRules notIn
         * @property {boolean|null} [ip] BytesRules ip
         * @property {boolean|null} [ipv4] BytesRules ipv4
         * @property {boolean|null} [ipv6] BytesRules ipv6
         * @property {boolean|null} [ignoreEmpty] BytesRules ignoreEmpty
         */

        /**
         * Constructs a new BytesRules.
         * @memberof validate
         * @classdesc Represents a BytesRules.
         * @implements IBytesRules
         * @constructor
         * @param {validate.IBytesRules=} [properties] Properties to set
         */
        function BytesRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BytesRules const.
         * @member {Uint8Array} const
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype["const"] = $util.newBuffer([]);

        /**
         * BytesRules len.
         * @member {number|Long} len
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.len = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BytesRules minLen.
         * @member {number|Long} minLen
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.minLen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BytesRules maxLen.
         * @member {number|Long} maxLen
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.maxLen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BytesRules pattern.
         * @member {string} pattern
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.pattern = "";

        /**
         * BytesRules prefix.
         * @member {Uint8Array} prefix
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.prefix = $util.newBuffer([]);

        /**
         * BytesRules suffix.
         * @member {Uint8Array} suffix
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.suffix = $util.newBuffer([]);

        /**
         * BytesRules contains.
         * @member {Uint8Array} contains
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.contains = $util.newBuffer([]);

        /**
         * BytesRules in.
         * @member {Array.<Uint8Array>} in
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype["in"] = $util.emptyArray;

        /**
         * BytesRules notIn.
         * @member {Array.<Uint8Array>} notIn
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.notIn = $util.emptyArray;

        /**
         * BytesRules ip.
         * @member {boolean|null|undefined} ip
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.ip = null;

        /**
         * BytesRules ipv4.
         * @member {boolean|null|undefined} ipv4
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.ipv4 = null;

        /**
         * BytesRules ipv6.
         * @member {boolean|null|undefined} ipv6
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.ipv6 = null;

        /**
         * BytesRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.ignoreEmpty = false;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * BytesRules wellKnown.
         * @member {"ip"|"ipv4"|"ipv6"|undefined} wellKnown
         * @memberof validate.BytesRules
         * @instance
         */
        Object.defineProperty(BytesRules.prototype, "wellKnown", {
            get: $util.oneOfGetter($oneOfFields = ["ip", "ipv4", "ipv6"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Verifies a BytesRules message.
         * @function verify
         * @memberof validate.BytesRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BytesRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!(message["const"] && typeof message["const"].length === "number" || $util.isString(message["const"])))
                    return "const: buffer expected";
            if (message.len != null && message.hasOwnProperty("len"))
                if (!$util.isInteger(message.len) && !(message.len && $util.isInteger(message.len.low) && $util.isInteger(message.len.high)))
                    return "len: integer|Long expected";
            if (message.minLen != null && message.hasOwnProperty("minLen"))
                if (!$util.isInteger(message.minLen) && !(message.minLen && $util.isInteger(message.minLen.low) && $util.isInteger(message.minLen.high)))
                    return "minLen: integer|Long expected";
            if (message.maxLen != null && message.hasOwnProperty("maxLen"))
                if (!$util.isInteger(message.maxLen) && !(message.maxLen && $util.isInteger(message.maxLen.low) && $util.isInteger(message.maxLen.high)))
                    return "maxLen: integer|Long expected";
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                if (!$util.isString(message.pattern))
                    return "pattern: string expected";
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                if (!(message.prefix && typeof message.prefix.length === "number" || $util.isString(message.prefix)))
                    return "prefix: buffer expected";
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                if (!(message.suffix && typeof message.suffix.length === "number" || $util.isString(message.suffix)))
                    return "suffix: buffer expected";
            if (message.contains != null && message.hasOwnProperty("contains"))
                if (!(message.contains && typeof message.contains.length === "number" || $util.isString(message.contains)))
                    return "contains: buffer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!(message["in"][i] && typeof message["in"][i].length === "number" || $util.isString(message["in"][i])))
                        return "in: buffer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!(message.notIn[i] && typeof message.notIn[i].length === "number" || $util.isString(message.notIn[i])))
                        return "notIn: buffer[] expected";
            }
            if (message.ip != null && message.hasOwnProperty("ip")) {
                properties.wellKnown = 1;
                if (typeof message.ip !== "boolean")
                    return "ip: boolean expected";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ipv4 !== "boolean")
                    return "ipv4: boolean expected";
            }
            if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ipv6 !== "boolean")
                    return "ipv6: boolean expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a BytesRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.BytesRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.BytesRules} BytesRules
         */
        BytesRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.BytesRules)
                return object;
            let message = new $root.validate.BytesRules();
            if (object["const"] != null)
                if (typeof object["const"] === "string")
                    $util.base64.decode(object["const"], message["const"] = $util.newBuffer($util.base64.length(object["const"])), 0);
                else if (object["const"].length)
                    message["const"] = object["const"];
            if (object.len != null)
                if ($util.Long)
                    (message.len = $util.Long.fromValue(object.len)).unsigned = true;
                else if (typeof object.len === "string")
                    message.len = parseInt(object.len, 10);
                else if (typeof object.len === "number")
                    message.len = object.len;
                else if (typeof object.len === "object")
                    message.len = new $util.LongBits(object.len.low >>> 0, object.len.high >>> 0).toNumber(true);
            if (object.minLen != null)
                if ($util.Long)
                    (message.minLen = $util.Long.fromValue(object.minLen)).unsigned = true;
                else if (typeof object.minLen === "string")
                    message.minLen = parseInt(object.minLen, 10);
                else if (typeof object.minLen === "number")
                    message.minLen = object.minLen;
                else if (typeof object.minLen === "object")
                    message.minLen = new $util.LongBits(object.minLen.low >>> 0, object.minLen.high >>> 0).toNumber(true);
            if (object.maxLen != null)
                if ($util.Long)
                    (message.maxLen = $util.Long.fromValue(object.maxLen)).unsigned = true;
                else if (typeof object.maxLen === "string")
                    message.maxLen = parseInt(object.maxLen, 10);
                else if (typeof object.maxLen === "number")
                    message.maxLen = object.maxLen;
                else if (typeof object.maxLen === "object")
                    message.maxLen = new $util.LongBits(object.maxLen.low >>> 0, object.maxLen.high >>> 0).toNumber(true);
            if (object.pattern != null)
                message.pattern = String(object.pattern);
            if (object.prefix != null)
                if (typeof object.prefix === "string")
                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);
                else if (object.prefix.length)
                    message.prefix = object.prefix;
            if (object.suffix != null)
                if (typeof object.suffix === "string")
                    $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);
                else if (object.suffix.length)
                    message.suffix = object.suffix;
            if (object.contains != null)
                if (typeof object.contains === "string")
                    $util.base64.decode(object.contains, message.contains = $util.newBuffer($util.base64.length(object.contains)), 0);
                else if (object.contains.length)
                    message.contains = object.contains;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.BytesRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if (typeof object["in"][i] === "string")
                        $util.base64.decode(object["in"][i], message["in"][i] = $util.newBuffer($util.base64.length(object["in"][i])), 0);
                    else if (object["in"][i].length)
                        message["in"][i] = object["in"][i];
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.BytesRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if (typeof object.notIn[i] === "string")
                        $util.base64.decode(object.notIn[i], message.notIn[i] = $util.newBuffer($util.base64.length(object.notIn[i])), 0);
                    else if (object.notIn[i].length)
                        message.notIn[i] = object.notIn[i];
            }
            if (object.ip != null)
                message.ip = Boolean(object.ip);
            if (object.ipv4 != null)
                message.ipv4 = Boolean(object.ipv4);
            if (object.ipv6 != null)
                message.ipv6 = Boolean(object.ipv6);
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a BytesRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.BytesRules
         * @static
         * @param {validate.BytesRules} message BytesRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BytesRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if (options.bytes === String)
                    object["const"] = "";
                else {
                    object["const"] = [];
                    if (options.bytes !== Array)
                        object["const"] = $util.newBuffer(object["const"]);
                }
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minLen = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minLen = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxLen = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxLen = options.longs === String ? "0" : 0;
                object.pattern = "";
                if (options.bytes === String)
                    object.prefix = "";
                else {
                    object.prefix = [];
                    if (options.bytes !== Array)
                        object.prefix = $util.newBuffer(object.prefix);
                }
                if (options.bytes === String)
                    object.suffix = "";
                else {
                    object.suffix = [];
                    if (options.bytes !== Array)
                        object.suffix = $util.newBuffer(object.suffix);
                }
                if (options.bytes === String)
                    object.contains = "";
                else {
                    object.contains = [];
                    if (options.bytes !== Array)
                        object.contains = $util.newBuffer(object.contains);
                }
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.len = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.len = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = options.bytes === String ? $util.base64.encode(message["const"], 0, message["const"].length) : options.bytes === Array ? Array.prototype.slice.call(message["const"]) : message["const"];
            if (message.minLen != null && message.hasOwnProperty("minLen"))
                if (typeof message.minLen === "number")
                    object.minLen = options.longs === String ? String(message.minLen) : message.minLen;
                else
                    object.minLen = options.longs === String ? $util.Long.prototype.toString.call(message.minLen) : options.longs === Number ? new $util.LongBits(message.minLen.low >>> 0, message.minLen.high >>> 0).toNumber(true) : message.minLen;
            if (message.maxLen != null && message.hasOwnProperty("maxLen"))
                if (typeof message.maxLen === "number")
                    object.maxLen = options.longs === String ? String(message.maxLen) : message.maxLen;
                else
                    object.maxLen = options.longs === String ? $util.Long.prototype.toString.call(message.maxLen) : options.longs === Number ? new $util.LongBits(message.maxLen.low >>> 0, message.maxLen.high >>> 0).toNumber(true) : message.maxLen;
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                object.pattern = message.pattern;
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;
            if (message.contains != null && message.hasOwnProperty("contains"))
                object.contains = options.bytes === String ? $util.base64.encode(message.contains, 0, message.contains.length) : options.bytes === Array ? Array.prototype.slice.call(message.contains) : message.contains;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = options.bytes === String ? $util.base64.encode(message["in"][j], 0, message["in"][j].length) : options.bytes === Array ? Array.prototype.slice.call(message["in"][j]) : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = options.bytes === String ? $util.base64.encode(message.notIn[j], 0, message.notIn[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.notIn[j]) : message.notIn[j];
            }
            if (message.ip != null && message.hasOwnProperty("ip")) {
                object.ip = message.ip;
                if (options.oneofs)
                    object.wellKnown = "ip";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                object.ipv4 = message.ipv4;
                if (options.oneofs)
                    object.wellKnown = "ipv4";
            }
            if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                object.ipv6 = message.ipv6;
                if (options.oneofs)
                    object.wellKnown = "ipv6";
            }
            if (message.len != null && message.hasOwnProperty("len"))
                if (typeof message.len === "number")
                    object.len = options.longs === String ? String(message.len) : message.len;
                else
                    object.len = options.longs === String ? $util.Long.prototype.toString.call(message.len) : options.longs === Number ? new $util.LongBits(message.len.low >>> 0, message.len.high >>> 0).toNumber(true) : message.len;
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this BytesRules to JSON.
         * @function toJSON
         * @memberof validate.BytesRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BytesRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BytesRules;
    })();

    validate.EnumRules = (function() {

        /**
         * Properties of an EnumRules.
         * @memberof validate
         * @interface IEnumRules
         * @property {number|null} ["const"] EnumRules const
         * @property {boolean|null} [definedOnly] EnumRules definedOnly
         * @property {Array.<number>|null} ["in"] EnumRules in
         * @property {Array.<number>|null} [notIn] EnumRules notIn
         */

        /**
         * Constructs a new EnumRules.
         * @memberof validate
         * @classdesc Represents an EnumRules.
         * @implements IEnumRules
         * @constructor
         * @param {validate.IEnumRules=} [properties] Properties to set
         */
        function EnumRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EnumRules const.
         * @member {number} const
         * @memberof validate.EnumRules
         * @instance
         */
        EnumRules.prototype["const"] = 0;

        /**
         * EnumRules definedOnly.
         * @member {boolean} definedOnly
         * @memberof validate.EnumRules
         * @instance
         */
        EnumRules.prototype.definedOnly = false;

        /**
         * EnumRules in.
         * @member {Array.<number>} in
         * @memberof validate.EnumRules
         * @instance
         */
        EnumRules.prototype["in"] = $util.emptyArray;

        /**
         * EnumRules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.EnumRules
         * @instance
         */
        EnumRules.prototype.notIn = $util.emptyArray;

        /**
         * Verifies an EnumRules message.
         * @function verify
         * @memberof validate.EnumRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EnumRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.definedOnly != null && message.hasOwnProperty("definedOnly"))
                if (typeof message.definedOnly !== "boolean")
                    return "definedOnly: boolean expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            return null;
        };

        /**
         * Creates an EnumRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.EnumRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.EnumRules} EnumRules
         */
        EnumRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.EnumRules)
                return object;
            let message = new $root.validate.EnumRules();
            if (object["const"] != null)
                message["const"] = object["const"] | 0;
            if (object.definedOnly != null)
                message.definedOnly = Boolean(object.definedOnly);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.EnumRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] | 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.EnumRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from an EnumRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.EnumRules
         * @static
         * @param {validate.EnumRules} message EnumRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EnumRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.definedOnly = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.definedOnly != null && message.hasOwnProperty("definedOnly"))
                object.definedOnly = message.definedOnly;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            return object;
        };

        /**
         * Converts this EnumRules to JSON.
         * @function toJSON
         * @memberof validate.EnumRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EnumRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EnumRules;
    })();

    validate.MessageRules = (function() {

        /**
         * Properties of a MessageRules.
         * @memberof validate
         * @interface IMessageRules
         * @property {boolean|null} [skip] MessageRules skip
         * @property {boolean|null} [required] MessageRules required
         */

        /**
         * Constructs a new MessageRules.
         * @memberof validate
         * @classdesc Represents a MessageRules.
         * @implements IMessageRules
         * @constructor
         * @param {validate.IMessageRules=} [properties] Properties to set
         */
        function MessageRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageRules skip.
         * @member {boolean} skip
         * @memberof validate.MessageRules
         * @instance
         */
        MessageRules.prototype.skip = false;

        /**
         * MessageRules required.
         * @member {boolean} required
         * @memberof validate.MessageRules
         * @instance
         */
        MessageRules.prototype.required = false;

        /**
         * Verifies a MessageRules message.
         * @function verify
         * @memberof validate.MessageRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.skip != null && message.hasOwnProperty("skip"))
                if (typeof message.skip !== "boolean")
                    return "skip: boolean expected";
            if (message.required != null && message.hasOwnProperty("required"))
                if (typeof message.required !== "boolean")
                    return "required: boolean expected";
            return null;
        };

        /**
         * Creates a MessageRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.MessageRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.MessageRules} MessageRules
         */
        MessageRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.MessageRules)
                return object;
            let message = new $root.validate.MessageRules();
            if (object.skip != null)
                message.skip = Boolean(object.skip);
            if (object.required != null)
                message.required = Boolean(object.required);
            return message;
        };

        /**
         * Creates a plain object from a MessageRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.MessageRules
         * @static
         * @param {validate.MessageRules} message MessageRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.skip = false;
                object.required = false;
            }
            if (message.skip != null && message.hasOwnProperty("skip"))
                object.skip = message.skip;
            if (message.required != null && message.hasOwnProperty("required"))
                object.required = message.required;
            return object;
        };

        /**
         * Converts this MessageRules to JSON.
         * @function toJSON
         * @memberof validate.MessageRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MessageRules;
    })();

    validate.RepeatedRules = (function() {

        /**
         * Properties of a RepeatedRules.
         * @memberof validate
         * @interface IRepeatedRules
         * @property {number|Long|null} [minItems] RepeatedRules minItems
         * @property {number|Long|null} [maxItems] RepeatedRules maxItems
         * @property {boolean|null} [unique] RepeatedRules unique
         * @property {validate.IFieldRules|null} [items] RepeatedRules items
         * @property {boolean|null} [ignoreEmpty] RepeatedRules ignoreEmpty
         */

        /**
         * Constructs a new RepeatedRules.
         * @memberof validate
         * @classdesc Represents a RepeatedRules.
         * @implements IRepeatedRules
         * @constructor
         * @param {validate.IRepeatedRules=} [properties] Properties to set
         */
        function RepeatedRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RepeatedRules minItems.
         * @member {number|Long} minItems
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.minItems = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RepeatedRules maxItems.
         * @member {number|Long} maxItems
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.maxItems = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RepeatedRules unique.
         * @member {boolean} unique
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.unique = false;

        /**
         * RepeatedRules items.
         * @member {validate.IFieldRules|null|undefined} items
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.items = null;

        /**
         * RepeatedRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.ignoreEmpty = false;

        /**
         * Verifies a RepeatedRules message.
         * @function verify
         * @memberof validate.RepeatedRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RepeatedRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.minItems != null && message.hasOwnProperty("minItems"))
                if (!$util.isInteger(message.minItems) && !(message.minItems && $util.isInteger(message.minItems.low) && $util.isInteger(message.minItems.high)))
                    return "minItems: integer|Long expected";
            if (message.maxItems != null && message.hasOwnProperty("maxItems"))
                if (!$util.isInteger(message.maxItems) && !(message.maxItems && $util.isInteger(message.maxItems.low) && $util.isInteger(message.maxItems.high)))
                    return "maxItems: integer|Long expected";
            if (message.unique != null && message.hasOwnProperty("unique"))
                if (typeof message.unique !== "boolean")
                    return "unique: boolean expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                let error = $root.validate.FieldRules.verify(message.items);
                if (error)
                    return "items." + error;
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a RepeatedRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.RepeatedRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.RepeatedRules} RepeatedRules
         */
        RepeatedRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.RepeatedRules)
                return object;
            let message = new $root.validate.RepeatedRules();
            if (object.minItems != null)
                if ($util.Long)
                    (message.minItems = $util.Long.fromValue(object.minItems)).unsigned = true;
                else if (typeof object.minItems === "string")
                    message.minItems = parseInt(object.minItems, 10);
                else if (typeof object.minItems === "number")
                    message.minItems = object.minItems;
                else if (typeof object.minItems === "object")
                    message.minItems = new $util.LongBits(object.minItems.low >>> 0, object.minItems.high >>> 0).toNumber(true);
            if (object.maxItems != null)
                if ($util.Long)
                    (message.maxItems = $util.Long.fromValue(object.maxItems)).unsigned = true;
                else if (typeof object.maxItems === "string")
                    message.maxItems = parseInt(object.maxItems, 10);
                else if (typeof object.maxItems === "number")
                    message.maxItems = object.maxItems;
                else if (typeof object.maxItems === "object")
                    message.maxItems = new $util.LongBits(object.maxItems.low >>> 0, object.maxItems.high >>> 0).toNumber(true);
            if (object.unique != null)
                message.unique = Boolean(object.unique);
            if (object.items != null) {
                if (typeof object.items !== "object")
                    throw TypeError(".validate.RepeatedRules.items: object expected");
                message.items = $root.validate.FieldRules.fromObject(object.items);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a RepeatedRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.RepeatedRules
         * @static
         * @param {validate.RepeatedRules} message RepeatedRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RepeatedRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minItems = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minItems = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxItems = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxItems = options.longs === String ? "0" : 0;
                object.unique = false;
                object.items = null;
                object.ignoreEmpty = false;
            }
            if (message.minItems != null && message.hasOwnProperty("minItems"))
                if (typeof message.minItems === "number")
                    object.minItems = options.longs === String ? String(message.minItems) : message.minItems;
                else
                    object.minItems = options.longs === String ? $util.Long.prototype.toString.call(message.minItems) : options.longs === Number ? new $util.LongBits(message.minItems.low >>> 0, message.minItems.high >>> 0).toNumber(true) : message.minItems;
            if (message.maxItems != null && message.hasOwnProperty("maxItems"))
                if (typeof message.maxItems === "number")
                    object.maxItems = options.longs === String ? String(message.maxItems) : message.maxItems;
                else
                    object.maxItems = options.longs === String ? $util.Long.prototype.toString.call(message.maxItems) : options.longs === Number ? new $util.LongBits(message.maxItems.low >>> 0, message.maxItems.high >>> 0).toNumber(true) : message.maxItems;
            if (message.unique != null && message.hasOwnProperty("unique"))
                object.unique = message.unique;
            if (message.items != null && message.hasOwnProperty("items"))
                object.items = $root.validate.FieldRules.toObject(message.items, options);
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this RepeatedRules to JSON.
         * @function toJSON
         * @memberof validate.RepeatedRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RepeatedRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RepeatedRules;
    })();

    validate.MapRules = (function() {

        /**
         * Properties of a MapRules.
         * @memberof validate
         * @interface IMapRules
         * @property {number|Long|null} [minPairs] MapRules minPairs
         * @property {number|Long|null} [maxPairs] MapRules maxPairs
         * @property {boolean|null} [noSparse] MapRules noSparse
         * @property {validate.IFieldRules|null} [keys] MapRules keys
         * @property {validate.IFieldRules|null} [values] MapRules values
         * @property {boolean|null} [ignoreEmpty] MapRules ignoreEmpty
         */

        /**
         * Constructs a new MapRules.
         * @memberof validate
         * @classdesc Represents a MapRules.
         * @implements IMapRules
         * @constructor
         * @param {validate.IMapRules=} [properties] Properties to set
         */
        function MapRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapRules minPairs.
         * @member {number|Long} minPairs
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.minPairs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MapRules maxPairs.
         * @member {number|Long} maxPairs
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.maxPairs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MapRules noSparse.
         * @member {boolean} noSparse
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.noSparse = false;

        /**
         * MapRules keys.
         * @member {validate.IFieldRules|null|undefined} keys
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.keys = null;

        /**
         * MapRules values.
         * @member {validate.IFieldRules|null|undefined} values
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.values = null;

        /**
         * MapRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.ignoreEmpty = false;

        /**
         * Verifies a MapRules message.
         * @function verify
         * @memberof validate.MapRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.minPairs != null && message.hasOwnProperty("minPairs"))
                if (!$util.isInteger(message.minPairs) && !(message.minPairs && $util.isInteger(message.minPairs.low) && $util.isInteger(message.minPairs.high)))
                    return "minPairs: integer|Long expected";
            if (message.maxPairs != null && message.hasOwnProperty("maxPairs"))
                if (!$util.isInteger(message.maxPairs) && !(message.maxPairs && $util.isInteger(message.maxPairs.low) && $util.isInteger(message.maxPairs.high)))
                    return "maxPairs: integer|Long expected";
            if (message.noSparse != null && message.hasOwnProperty("noSparse"))
                if (typeof message.noSparse !== "boolean")
                    return "noSparse: boolean expected";
            if (message.keys != null && message.hasOwnProperty("keys")) {
                let error = $root.validate.FieldRules.verify(message.keys);
                if (error)
                    return "keys." + error;
            }
            if (message.values != null && message.hasOwnProperty("values")) {
                let error = $root.validate.FieldRules.verify(message.values);
                if (error)
                    return "values." + error;
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a MapRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.MapRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.MapRules} MapRules
         */
        MapRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.MapRules)
                return object;
            let message = new $root.validate.MapRules();
            if (object.minPairs != null)
                if ($util.Long)
                    (message.minPairs = $util.Long.fromValue(object.minPairs)).unsigned = true;
                else if (typeof object.minPairs === "string")
                    message.minPairs = parseInt(object.minPairs, 10);
                else if (typeof object.minPairs === "number")
                    message.minPairs = object.minPairs;
                else if (typeof object.minPairs === "object")
                    message.minPairs = new $util.LongBits(object.minPairs.low >>> 0, object.minPairs.high >>> 0).toNumber(true);
            if (object.maxPairs != null)
                if ($util.Long)
                    (message.maxPairs = $util.Long.fromValue(object.maxPairs)).unsigned = true;
                else if (typeof object.maxPairs === "string")
                    message.maxPairs = parseInt(object.maxPairs, 10);
                else if (typeof object.maxPairs === "number")
                    message.maxPairs = object.maxPairs;
                else if (typeof object.maxPairs === "object")
                    message.maxPairs = new $util.LongBits(object.maxPairs.low >>> 0, object.maxPairs.high >>> 0).toNumber(true);
            if (object.noSparse != null)
                message.noSparse = Boolean(object.noSparse);
            if (object.keys != null) {
                if (typeof object.keys !== "object")
                    throw TypeError(".validate.MapRules.keys: object expected");
                message.keys = $root.validate.FieldRules.fromObject(object.keys);
            }
            if (object.values != null) {
                if (typeof object.values !== "object")
                    throw TypeError(".validate.MapRules.values: object expected");
                message.values = $root.validate.FieldRules.fromObject(object.values);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a MapRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.MapRules
         * @static
         * @param {validate.MapRules} message MapRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minPairs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minPairs = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxPairs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxPairs = options.longs === String ? "0" : 0;
                object.noSparse = false;
                object.keys = null;
                object.values = null;
                object.ignoreEmpty = false;
            }
            if (message.minPairs != null && message.hasOwnProperty("minPairs"))
                if (typeof message.minPairs === "number")
                    object.minPairs = options.longs === String ? String(message.minPairs) : message.minPairs;
                else
                    object.minPairs = options.longs === String ? $util.Long.prototype.toString.call(message.minPairs) : options.longs === Number ? new $util.LongBits(message.minPairs.low >>> 0, message.minPairs.high >>> 0).toNumber(true) : message.minPairs;
            if (message.maxPairs != null && message.hasOwnProperty("maxPairs"))
                if (typeof message.maxPairs === "number")
                    object.maxPairs = options.longs === String ? String(message.maxPairs) : message.maxPairs;
                else
                    object.maxPairs = options.longs === String ? $util.Long.prototype.toString.call(message.maxPairs) : options.longs === Number ? new $util.LongBits(message.maxPairs.low >>> 0, message.maxPairs.high >>> 0).toNumber(true) : message.maxPairs;
            if (message.noSparse != null && message.hasOwnProperty("noSparse"))
                object.noSparse = message.noSparse;
            if (message.keys != null && message.hasOwnProperty("keys"))
                object.keys = $root.validate.FieldRules.toObject(message.keys, options);
            if (message.values != null && message.hasOwnProperty("values"))
                object.values = $root.validate.FieldRules.toObject(message.values, options);
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this MapRules to JSON.
         * @function toJSON
         * @memberof validate.MapRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapRules;
    })();

    validate.AnyRules = (function() {

        /**
         * Properties of an AnyRules.
         * @memberof validate
         * @interface IAnyRules
         * @property {boolean|null} [required] AnyRules required
         * @property {Array.<string>|null} ["in"] AnyRules in
         * @property {Array.<string>|null} [notIn] AnyRules notIn
         */

        /**
         * Constructs a new AnyRules.
         * @memberof validate
         * @classdesc Represents an AnyRules.
         * @implements IAnyRules
         * @constructor
         * @param {validate.IAnyRules=} [properties] Properties to set
         */
        function AnyRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AnyRules required.
         * @member {boolean} required
         * @memberof validate.AnyRules
         * @instance
         */
        AnyRules.prototype.required = false;

        /**
         * AnyRules in.
         * @member {Array.<string>} in
         * @memberof validate.AnyRules
         * @instance
         */
        AnyRules.prototype["in"] = $util.emptyArray;

        /**
         * AnyRules notIn.
         * @member {Array.<string>} notIn
         * @memberof validate.AnyRules
         * @instance
         */
        AnyRules.prototype.notIn = $util.emptyArray;

        /**
         * Verifies an AnyRules message.
         * @function verify
         * @memberof validate.AnyRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AnyRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.required != null && message.hasOwnProperty("required"))
                if (typeof message.required !== "boolean")
                    return "required: boolean expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isString(message["in"][i]))
                        return "in: string[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isString(message.notIn[i]))
                        return "notIn: string[] expected";
            }
            return null;
        };

        /**
         * Creates an AnyRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.AnyRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.AnyRules} AnyRules
         */
        AnyRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.AnyRules)
                return object;
            let message = new $root.validate.AnyRules();
            if (object.required != null)
                message.required = Boolean(object.required);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.AnyRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = String(object["in"][i]);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.AnyRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = String(object.notIn[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from an AnyRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.AnyRules
         * @static
         * @param {validate.AnyRules} message AnyRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AnyRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults)
                object.required = false;
            if (message.required != null && message.hasOwnProperty("required"))
                object.required = message.required;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            return object;
        };

        /**
         * Converts this AnyRules to JSON.
         * @function toJSON
         * @memberof validate.AnyRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AnyRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AnyRules;
    })();

    validate.DurationRules = (function() {

        /**
         * Properties of a DurationRules.
         * @memberof validate
         * @interface IDurationRules
         * @property {boolean|null} [required] DurationRules required
         * @property {google.protobuf.IDuration|null} ["const"] DurationRules const
         * @property {google.protobuf.IDuration|null} [lt] DurationRules lt
         * @property {google.protobuf.IDuration|null} [lte] DurationRules lte
         * @property {google.protobuf.IDuration|null} [gt] DurationRules gt
         * @property {google.protobuf.IDuration|null} [gte] DurationRules gte
         * @property {Array.<google.protobuf.IDuration>|null} ["in"] DurationRules in
         * @property {Array.<google.protobuf.IDuration>|null} [notIn] DurationRules notIn
         */

        /**
         * Constructs a new DurationRules.
         * @memberof validate
         * @classdesc Represents a DurationRules.
         * @implements IDurationRules
         * @constructor
         * @param {validate.IDurationRules=} [properties] Properties to set
         */
        function DurationRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DurationRules required.
         * @member {boolean} required
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.required = false;

        /**
         * DurationRules const.
         * @member {google.protobuf.IDuration|null|undefined} const
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype["const"] = null;

        /**
         * DurationRules lt.
         * @member {google.protobuf.IDuration|null|undefined} lt
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.lt = null;

        /**
         * DurationRules lte.
         * @member {google.protobuf.IDuration|null|undefined} lte
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.lte = null;

        /**
         * DurationRules gt.
         * @member {google.protobuf.IDuration|null|undefined} gt
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.gt = null;

        /**
         * DurationRules gte.
         * @member {google.protobuf.IDuration|null|undefined} gte
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.gte = null;

        /**
         * DurationRules in.
         * @member {Array.<google.protobuf.IDuration>} in
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype["in"] = $util.emptyArray;

        /**
         * DurationRules notIn.
         * @member {Array.<google.protobuf.IDuration>} notIn
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.notIn = $util.emptyArray;

        /**
         * Verifies a DurationRules message.
         * @function verify
         * @memberof validate.DurationRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DurationRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.required != null && message.hasOwnProperty("required"))
                if (typeof message.required !== "boolean")
                    return "required: boolean expected";
            if (message["const"] != null && message.hasOwnProperty("const")) {
                let error = $root.google.protobuf.Duration.verify(message["const"]);
                if (error)
                    return "const." + error;
            }
            if (message.lt != null && message.hasOwnProperty("lt")) {
                let error = $root.google.protobuf.Duration.verify(message.lt);
                if (error)
                    return "lt." + error;
            }
            if (message.lte != null && message.hasOwnProperty("lte")) {
                let error = $root.google.protobuf.Duration.verify(message.lte);
                if (error)
                    return "lte." + error;
            }
            if (message.gt != null && message.hasOwnProperty("gt")) {
                let error = $root.google.protobuf.Duration.verify(message.gt);
                if (error)
                    return "gt." + error;
            }
            if (message.gte != null && message.hasOwnProperty("gte")) {
                let error = $root.google.protobuf.Duration.verify(message.gte);
                if (error)
                    return "gte." + error;
            }
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i) {
                    let error = $root.google.protobuf.Duration.verify(message["in"][i]);
                    if (error)
                        return "in." + error;
                }
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i) {
                    let error = $root.google.protobuf.Duration.verify(message.notIn[i]);
                    if (error)
                        return "notIn." + error;
                }
            }
            return null;
        };

        /**
         * Creates a DurationRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.DurationRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.DurationRules} DurationRules
         */
        DurationRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.DurationRules)
                return object;
            let message = new $root.validate.DurationRules();
            if (object.required != null)
                message.required = Boolean(object.required);
            if (object["const"] != null) {
                if (typeof object["const"] !== "object")
                    throw TypeError(".validate.DurationRules.const: object expected");
                message["const"] = $root.google.protobuf.Duration.fromObject(object["const"]);
            }
            if (object.lt != null) {
                if (typeof object.lt !== "object")
                    throw TypeError(".validate.DurationRules.lt: object expected");
                message.lt = $root.google.protobuf.Duration.fromObject(object.lt);
            }
            if (object.lte != null) {
                if (typeof object.lte !== "object")
                    throw TypeError(".validate.DurationRules.lte: object expected");
                message.lte = $root.google.protobuf.Duration.fromObject(object.lte);
            }
            if (object.gt != null) {
                if (typeof object.gt !== "object")
                    throw TypeError(".validate.DurationRules.gt: object expected");
                message.gt = $root.google.protobuf.Duration.fromObject(object.gt);
            }
            if (object.gte != null) {
                if (typeof object.gte !== "object")
                    throw TypeError(".validate.DurationRules.gte: object expected");
                message.gte = $root.google.protobuf.Duration.fromObject(object.gte);
            }
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.DurationRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i) {
                    if (typeof object["in"][i] !== "object")
                        throw TypeError(".validate.DurationRules.in: object expected");
                    message["in"][i] = $root.google.protobuf.Duration.fromObject(object["in"][i]);
                }
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.DurationRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i) {
                    if (typeof object.notIn[i] !== "object")
                        throw TypeError(".validate.DurationRules.notIn: object expected");
                    message.notIn[i] = $root.google.protobuf.Duration.fromObject(object.notIn[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a DurationRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.DurationRules
         * @static
         * @param {validate.DurationRules} message DurationRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DurationRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object.required = false;
                object["const"] = null;
                object.lt = null;
                object.lte = null;
                object.gt = null;
                object.gte = null;
            }
            if (message.required != null && message.hasOwnProperty("required"))
                object.required = message.required;
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = $root.google.protobuf.Duration.toObject(message["const"], options);
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = $root.google.protobuf.Duration.toObject(message.lt, options);
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = $root.google.protobuf.Duration.toObject(message.lte, options);
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = $root.google.protobuf.Duration.toObject(message.gt, options);
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = $root.google.protobuf.Duration.toObject(message.gte, options);
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = $root.google.protobuf.Duration.toObject(message["in"][j], options);
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = $root.google.protobuf.Duration.toObject(message.notIn[j], options);
            }
            return object;
        };

        /**
         * Converts this DurationRules to JSON.
         * @function toJSON
         * @memberof validate.DurationRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DurationRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DurationRules;
    })();

    validate.TimestampRules = (function() {

        /**
         * Properties of a TimestampRules.
         * @memberof validate
         * @interface ITimestampRules
         * @property {boolean|null} [required] TimestampRules required
         * @property {google.protobuf.ITimestamp|null} ["const"] TimestampRules const
         * @property {google.protobuf.ITimestamp|null} [lt] TimestampRules lt
         * @property {google.protobuf.ITimestamp|null} [lte] TimestampRules lte
         * @property {google.protobuf.ITimestamp|null} [gt] TimestampRules gt
         * @property {google.protobuf.ITimestamp|null} [gte] TimestampRules gte
         * @property {boolean|null} [ltNow] TimestampRules ltNow
         * @property {boolean|null} [gtNow] TimestampRules gtNow
         * @property {google.protobuf.IDuration|null} [within] TimestampRules within
         */

        /**
         * Constructs a new TimestampRules.
         * @memberof validate
         * @classdesc Represents a TimestampRules.
         * @implements ITimestampRules
         * @constructor
         * @param {validate.ITimestampRules=} [properties] Properties to set
         */
        function TimestampRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TimestampRules required.
         * @member {boolean} required
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.required = false;

        /**
         * TimestampRules const.
         * @member {google.protobuf.ITimestamp|null|undefined} const
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype["const"] = null;

        /**
         * TimestampRules lt.
         * @member {google.protobuf.ITimestamp|null|undefined} lt
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.lt = null;

        /**
         * TimestampRules lte.
         * @member {google.protobuf.ITimestamp|null|undefined} lte
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.lte = null;

        /**
         * TimestampRules gt.
         * @member {google.protobuf.ITimestamp|null|undefined} gt
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.gt = null;

        /**
         * TimestampRules gte.
         * @member {google.protobuf.ITimestamp|null|undefined} gte
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.gte = null;

        /**
         * TimestampRules ltNow.
         * @member {boolean} ltNow
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.ltNow = false;

        /**
         * TimestampRules gtNow.
         * @member {boolean} gtNow
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.gtNow = false;

        /**
         * TimestampRules within.
         * @member {google.protobuf.IDuration|null|undefined} within
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.within = null;

        /**
         * Verifies a TimestampRules message.
         * @function verify
         * @memberof validate.TimestampRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TimestampRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.required != null && message.hasOwnProperty("required"))
                if (typeof message.required !== "boolean")
                    return "required: boolean expected";
            if (message["const"] != null && message.hasOwnProperty("const")) {
                let error = $root.google.protobuf.Timestamp.verify(message["const"]);
                if (error)
                    return "const." + error;
            }
            if (message.lt != null && message.hasOwnProperty("lt")) {
                let error = $root.google.protobuf.Timestamp.verify(message.lt);
                if (error)
                    return "lt." + error;
            }
            if (message.lte != null && message.hasOwnProperty("lte")) {
                let error = $root.google.protobuf.Timestamp.verify(message.lte);
                if (error)
                    return "lte." + error;
            }
            if (message.gt != null && message.hasOwnProperty("gt")) {
                let error = $root.google.protobuf.Timestamp.verify(message.gt);
                if (error)
                    return "gt." + error;
            }
            if (message.gte != null && message.hasOwnProperty("gte")) {
                let error = $root.google.protobuf.Timestamp.verify(message.gte);
                if (error)
                    return "gte." + error;
            }
            if (message.ltNow != null && message.hasOwnProperty("ltNow"))
                if (typeof message.ltNow !== "boolean")
                    return "ltNow: boolean expected";
            if (message.gtNow != null && message.hasOwnProperty("gtNow"))
                if (typeof message.gtNow !== "boolean")
                    return "gtNow: boolean expected";
            if (message.within != null && message.hasOwnProperty("within")) {
                let error = $root.google.protobuf.Duration.verify(message.within);
                if (error)
                    return "within." + error;
            }
            return null;
        };

        /**
         * Creates a TimestampRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.TimestampRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.TimestampRules} TimestampRules
         */
        TimestampRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.TimestampRules)
                return object;
            let message = new $root.validate.TimestampRules();
            if (object.required != null)
                message.required = Boolean(object.required);
            if (object["const"] != null) {
                if (typeof object["const"] !== "object")
                    throw TypeError(".validate.TimestampRules.const: object expected");
                message["const"] = $root.google.protobuf.Timestamp.fromObject(object["const"]);
            }
            if (object.lt != null) {
                if (typeof object.lt !== "object")
                    throw TypeError(".validate.TimestampRules.lt: object expected");
                message.lt = $root.google.protobuf.Timestamp.fromObject(object.lt);
            }
            if (object.lte != null) {
                if (typeof object.lte !== "object")
                    throw TypeError(".validate.TimestampRules.lte: object expected");
                message.lte = $root.google.protobuf.Timestamp.fromObject(object.lte);
            }
            if (object.gt != null) {
                if (typeof object.gt !== "object")
                    throw TypeError(".validate.TimestampRules.gt: object expected");
                message.gt = $root.google.protobuf.Timestamp.fromObject(object.gt);
            }
            if (object.gte != null) {
                if (typeof object.gte !== "object")
                    throw TypeError(".validate.TimestampRules.gte: object expected");
                message.gte = $root.google.protobuf.Timestamp.fromObject(object.gte);
            }
            if (object.ltNow != null)
                message.ltNow = Boolean(object.ltNow);
            if (object.gtNow != null)
                message.gtNow = Boolean(object.gtNow);
            if (object.within != null) {
                if (typeof object.within !== "object")
                    throw TypeError(".validate.TimestampRules.within: object expected");
                message.within = $root.google.protobuf.Duration.fromObject(object.within);
            }
            return message;
        };

        /**
         * Creates a plain object from a TimestampRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.TimestampRules
         * @static
         * @param {validate.TimestampRules} message TimestampRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TimestampRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.required = false;
                object["const"] = null;
                object.lt = null;
                object.lte = null;
                object.gt = null;
                object.gte = null;
                object.ltNow = false;
                object.gtNow = false;
                object.within = null;
            }
            if (message.required != null && message.hasOwnProperty("required"))
                object.required = message.required;
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = $root.google.protobuf.Timestamp.toObject(message["const"], options);
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = $root.google.protobuf.Timestamp.toObject(message.lt, options);
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = $root.google.protobuf.Timestamp.toObject(message.lte, options);
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = $root.google.protobuf.Timestamp.toObject(message.gt, options);
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = $root.google.protobuf.Timestamp.toObject(message.gte, options);
            if (message.ltNow != null && message.hasOwnProperty("ltNow"))
                object.ltNow = message.ltNow;
            if (message.gtNow != null && message.hasOwnProperty("gtNow"))
                object.gtNow = message.gtNow;
            if (message.within != null && message.hasOwnProperty("within"))
                object.within = $root.google.protobuf.Duration.toObject(message.within, options);
            return object;
        };

        /**
         * Converts this TimestampRules to JSON.
         * @function toJSON
         * @memberof validate.TimestampRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TimestampRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TimestampRules;
    })();

    return validate;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Http fullyDecodeReservedExpansion.
             * @member {boolean} fullyDecodeReservedExpansion
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.fullyDecodeReservedExpansion = false;

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                    if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                        return "fullyDecodeReservedExpansion: boolean expected";
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                if (object.fullyDecodeReservedExpansion != null)
                    message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (options.defaults)
                    object.fullyDecodeReservedExpansion = false;
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                    object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [body] HttpRule body
             * @property {string|null} [responseBody] HttpRule responseBody
             * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additionalBindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule responseBody.
             * @member {string} responseBody
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.responseBody = "";

            /**
             * HttpRule additionalBindings.
             * @member {Array.<google.api.IHttpRule>} additionalBindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additionalBindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                    if (!$util.isString(message.responseBody))
                        return "responseBody: string expected";
                if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                    if (!Array.isArray(message.additionalBindings))
                        return "additionalBindings: array expected";
                    for (let i = 0; i < message.additionalBindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                        if (error)
                            return "additionalBindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.body != null)
                    message.body = String(object.body);
                if (object.responseBody != null)
                    message.responseBody = String(object.responseBody);
                if (object.additionalBindings) {
                    if (!Array.isArray(object.additionalBindings))
                        throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                    message.additionalBindings = [];
                    for (let i = 0; i < object.additionalBindings.length; ++i) {
                        if (typeof object.additionalBindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                        message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additionalBindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                    object.responseBody = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additionalBindings && message.additionalBindings.length) {
                    object.additionalBindings = [];
                    for (let j = 0; j < message.additionalBindings.length; ++j)
                        object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                }
                if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                    object.responseBody = message.responseBody;
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
             * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.publicDependency = [];
                this.weakDependency = [];
                this.messageType = [];
                this.enumType = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto publicDependency.
             * @member {Array.<number>} publicDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;

            /**
             * FileDescriptorProto weakDependency.
             * @member {Array.<number>} weakDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;

            /**
             * FileDescriptorProto messageType.
             * @member {Array.<google.protobuf.IDescriptorProto>} messageType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.messageType = $util.emptyArray;

            /**
             * FileDescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto sourceCodeInfo.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.sourceCodeInfo = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                    if (!Array.isArray(message.publicDependency))
                        return "publicDependency: array expected";
                    for (let i = 0; i < message.publicDependency.length; ++i)
                        if (!$util.isInteger(message.publicDependency[i]))
                            return "publicDependency: integer[] expected";
                }
                if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                    if (!Array.isArray(message.weakDependency))
                        return "weakDependency: array expected";
                    for (let i = 0; i < message.weakDependency.length; ++i)
                        if (!$util.isInteger(message.weakDependency[i]))
                            return "weakDependency: integer[] expected";
                }
                if (message.messageType != null && message.hasOwnProperty("messageType")) {
                    if (!Array.isArray(message.messageType))
                        return "messageType: array expected";
                    for (let i = 0; i < message.messageType.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                        if (error)
                            return "messageType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (let i = 0; i < message.enumType.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                    if (error)
                        return "sourceCodeInfo." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.publicDependency) {
                    if (!Array.isArray(object.publicDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                    message.publicDependency = [];
                    for (let i = 0; i < object.publicDependency.length; ++i)
                        message.publicDependency[i] = object.publicDependency[i] | 0;
                }
                if (object.weakDependency) {
                    if (!Array.isArray(object.weakDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                    message.weakDependency = [];
                    for (let i = 0; i < object.weakDependency.length; ++i)
                        message.weakDependency[i] = object.weakDependency[i] | 0;
                }
                if (object.messageType) {
                    if (!Array.isArray(object.messageType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                    message.messageType = [];
                    for (let i = 0; i < object.messageType.length; ++i) {
                        if (typeof object.messageType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                        message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (let i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.sourceCodeInfo != null) {
                    if (typeof object.sourceCodeInfo !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.messageType = [];
                    object.enumType = [];
                    object.service = [];
                    object.extension = [];
                    object.publicDependency = [];
                    object.weakDependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.sourceCodeInfo = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.messageType && message.messageType.length) {
                    object.messageType = [];
                    for (let j = 0; j < message.messageType.length; ++j)
                        object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (let j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                    object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                if (message.publicDependency && message.publicDependency.length) {
                    object.publicDependency = [];
                    for (let j = 0; j < message.publicDependency.length; ++j)
                        object.publicDependency[j] = message.publicDependency[j];
                }
                if (message.weakDependency && message.weakDependency.length) {
                    object.weakDependency = [];
                    for (let j = 0; j < message.weakDependency.length; ++j)
                        object.weakDependency[j] = message.weakDependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nestedType = [];
                this.enumType = [];
                this.extensionRange = [];
                this.oneofDecl = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nestedType.
             * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nestedType = $util.emptyArray;

            /**
             * DescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * DescriptorProto extensionRange.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extensionRange = $util.emptyArray;

            /**
             * DescriptorProto oneofDecl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reservedRange.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * DescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                    if (!Array.isArray(message.nestedType))
                        return "nestedType: array expected";
                    for (let i = 0; i < message.nestedType.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                        if (error)
                            return "nestedType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (let i = 0; i < message.enumType.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                    if (!Array.isArray(message.extensionRange))
                        return "extensionRange: array expected";
                    for (let i = 0; i < message.extensionRange.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                        if (error)
                            return "extensionRange." + error;
                    }
                }
                if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                    if (!Array.isArray(message.oneofDecl))
                        return "oneofDecl: array expected";
                    for (let i = 0; i < message.oneofDecl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                        if (error)
                            return "oneofDecl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (let i = 0; i < message.reservedRange.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (let i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nestedType) {
                    if (!Array.isArray(object.nestedType))
                        throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                    message.nestedType = [];
                    for (let i = 0; i < object.nestedType.length; ++i) {
                        if (typeof object.nestedType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                        message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (let i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.extensionRange) {
                    if (!Array.isArray(object.extensionRange))
                        throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                    message.extensionRange = [];
                    for (let i = 0; i < object.extensionRange.length; ++i) {
                        if (typeof object.extensionRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                        message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                    }
                }
                if (object.oneofDecl) {
                    if (!Array.isArray(object.oneofDecl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                    message.oneofDecl = [];
                    for (let i = 0; i < object.oneofDecl.length; ++i) {
                        if (typeof object.oneofDecl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                        message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (let i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (let i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nestedType = [];
                    object.enumType = [];
                    object.extensionRange = [];
                    object.extension = [];
                    object.oneofDecl = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nestedType && message.nestedType.length) {
                    object.nestedType = [];
                    for (let j = 0; j < message.nestedType.length; ++j)
                        object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (let j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.extensionRange && message.extensionRange.length) {
                    object.extensionRange = [];
                    for (let j = 0; j < message.extensionRange.length; ++j)
                        object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneofDecl && message.oneofDecl.length) {
                    object.oneofDecl = [];
                    for (let j = 0; j < message.oneofDecl.length; ++j)
                        object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                }
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (let j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (let j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * ExtensionRange options.
                 * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.options = null;

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        let error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                        message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                        object.options = null;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.ExtensionRangeOptions = (function() {

            /**
             * Properties of an ExtensionRangeOptions.
             * @memberof google.protobuf
             * @interface IExtensionRangeOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
             */

            /**
             * Constructs a new ExtensionRangeOptions.
             * @memberof google.protobuf
             * @classdesc Represents an ExtensionRangeOptions.
             * @implements IExtensionRangeOptions
             * @constructor
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             */
            function ExtensionRangeOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExtensionRangeOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies an ExtensionRangeOptions message.
             * @function verify
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtensionRangeOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             */
            ExtensionRangeOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                    return object;
                let message = new $root.google.protobuf.ExtensionRangeOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtensionRangeOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ExtensionRangeOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExtensionRangeOptions;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [typeName] FieldDescriptorProto typeName
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
             * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
             * @property {string|null} [jsonName] FieldDescriptorProto jsonName
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto typeName.
             * @member {string} typeName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.typeName = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto defaultValue.
             * @member {string} defaultValue
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.defaultValue = "";

            /**
             * FieldDescriptorProto oneofIndex.
             * @member {number} oneofIndex
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneofIndex = 0;

            /**
             * FieldDescriptorProto jsonName.
             * @member {string} jsonName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.jsonName = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * FieldDescriptorProto proto3Optional.
             * @member {boolean} proto3Optional
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.proto3Optional = false;

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    if (!$util.isString(message.typeName))
                        return "typeName: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    if (!$util.isString(message.defaultValue))
                        return "defaultValue: string expected";
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    if (!$util.isInteger(message.oneofIndex))
                        return "oneofIndex: integer expected";
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    if (!$util.isString(message.jsonName))
                        return "jsonName: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                    if (typeof message.proto3Optional !== "boolean")
                        return "proto3Optional: boolean expected";
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.typeName != null)
                    message.typeName = String(object.typeName);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.defaultValue != null)
                    message.defaultValue = String(object.defaultValue);
                if (object.oneofIndex != null)
                    message.oneofIndex = object.oneofIndex | 0;
                if (object.jsonName != null)
                    message.jsonName = String(object.jsonName);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                if (object.proto3Optional != null)
                    message.proto3Optional = Boolean(object.proto3Optional);
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.typeName = "";
                    object.defaultValue = "";
                    object.options = null;
                    object.oneofIndex = 0;
                    object.jsonName = "";
                    object.proto3Optional = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    object.typeName = message.typeName;
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    object.defaultValue = message.defaultValue;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    object.oneofIndex = message.oneofIndex;
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    object.jsonName = message.jsonName;
                if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                    object.proto3Optional = message.proto3Optional;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * EnumDescriptorProto reservedRange.
             * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * EnumDescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (let i = 0; i < message.reservedRange.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (let i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (let i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (let i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.value = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (let j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (let j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnumDescriptorProto.EnumReservedRange = (function() {

                /**
                 * Properties of an EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @interface IEnumReservedRange
                 * @property {number|null} [start] EnumReservedRange start
                 * @property {number|null} [end] EnumReservedRange end
                 */

                /**
                 * Constructs a new EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @classdesc Represents an EnumReservedRange.
                 * @implements IEnumReservedRange
                 * @constructor
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 */
                function EnumReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.start = 0;

                /**
                 * EnumReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.end = 0;

                /**
                 * Verifies an EnumReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 */
                EnumReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                        return object;
                    let message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this EnumReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumReservedRange;
            })();

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [inputType] MethodDescriptorProto inputType
             * @property {string|null} [outputType] MethodDescriptorProto outputType
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
             * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto inputType.
             * @member {string} inputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.inputType = "";

            /**
             * MethodDescriptorProto outputType.
             * @member {string} outputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.outputType = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto clientStreaming.
             * @member {boolean} clientStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.clientStreaming = false;

            /**
             * MethodDescriptorProto serverStreaming.
             * @member {boolean} serverStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.serverStreaming = false;

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    if (!$util.isString(message.inputType))
                        return "inputType: string expected";
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    if (!$util.isString(message.outputType))
                        return "outputType: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    if (typeof message.clientStreaming !== "boolean")
                        return "clientStreaming: boolean expected";
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    if (typeof message.serverStreaming !== "boolean")
                        return "serverStreaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.inputType != null)
                    message.inputType = String(object.inputType);
                if (object.outputType != null)
                    message.outputType = String(object.outputType);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.clientStreaming != null)
                    message.clientStreaming = Boolean(object.clientStreaming);
                if (object.serverStreaming != null)
                    message.serverStreaming = Boolean(object.serverStreaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.inputType = "";
                    object.outputType = "";
                    object.options = null;
                    object.clientStreaming = false;
                    object.serverStreaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    object.inputType = message.inputType;
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    object.outputType = message.outputType;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    object.clientStreaming = message.clientStreaming;
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    object.serverStreaming = message.serverStreaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [javaPackage] FileOptions javaPackage
             * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
             * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
             * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
             * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
             * @property {string|null} [goPackage] FileOptions goPackage
             * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
             * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
             * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
             * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
             * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
             * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
             * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
             * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
             * @property {string|null} [phpNamespace] FileOptions phpNamespace
             * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
             * @property {string|null} [rubyPackage] FileOptions rubyPackage
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions javaPackage.
             * @member {string} javaPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaPackage = "";

            /**
             * FileOptions javaOuterClassname.
             * @member {string} javaOuterClassname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaOuterClassname = "";

            /**
             * FileOptions javaMultipleFiles.
             * @member {boolean} javaMultipleFiles
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaMultipleFiles = false;

            /**
             * FileOptions javaGenerateEqualsAndHash.
             * @member {boolean} javaGenerateEqualsAndHash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenerateEqualsAndHash = false;

            /**
             * FileOptions javaStringCheckUtf8.
             * @member {boolean} javaStringCheckUtf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaStringCheckUtf8 = false;

            /**
             * FileOptions optimizeFor.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimizeFor = 1;

            /**
             * FileOptions goPackage.
             * @member {string} goPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.goPackage = "";

            /**
             * FileOptions ccGenericServices.
             * @member {boolean} ccGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccGenericServices = false;

            /**
             * FileOptions javaGenericServices.
             * @member {boolean} javaGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenericServices = false;

            /**
             * FileOptions pyGenericServices.
             * @member {boolean} pyGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.pyGenericServices = false;

            /**
             * FileOptions phpGenericServices.
             * @member {boolean} phpGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpGenericServices = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions ccEnableArenas.
             * @member {boolean} ccEnableArenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccEnableArenas = true;

            /**
             * FileOptions objcClassPrefix.
             * @member {string} objcClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objcClassPrefix = "";

            /**
             * FileOptions csharpNamespace.
             * @member {string} csharpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharpNamespace = "";

            /**
             * FileOptions swiftPrefix.
             * @member {string} swiftPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.swiftPrefix = "";

            /**
             * FileOptions phpClassPrefix.
             * @member {string} phpClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpClassPrefix = "";

            /**
             * FileOptions phpNamespace.
             * @member {string} phpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpNamespace = "";

            /**
             * FileOptions phpMetadataNamespace.
             * @member {string} phpMetadataNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpMetadataNamespace = "";

            /**
             * FileOptions rubyPackage.
             * @member {string} rubyPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.rubyPackage = "";

            /**
             * FileOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    if (!$util.isString(message.javaPackage))
                        return "javaPackage: string expected";
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    if (!$util.isString(message.javaOuterClassname))
                        return "javaOuterClassname: string expected";
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    if (typeof message.javaMultipleFiles !== "boolean")
                        return "javaMultipleFiles: boolean expected";
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                        return "javaGenerateEqualsAndHash: boolean expected";
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    if (typeof message.javaStringCheckUtf8 !== "boolean")
                        return "javaStringCheckUtf8: boolean expected";
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    switch (message.optimizeFor) {
                    default:
                        return "optimizeFor: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    if (!$util.isString(message.goPackage))
                        return "goPackage: string expected";
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    if (typeof message.ccGenericServices !== "boolean")
                        return "ccGenericServices: boolean expected";
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    if (typeof message.javaGenericServices !== "boolean")
                        return "javaGenericServices: boolean expected";
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    if (typeof message.pyGenericServices !== "boolean")
                        return "pyGenericServices: boolean expected";
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    if (typeof message.phpGenericServices !== "boolean")
                        return "phpGenericServices: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    if (typeof message.ccEnableArenas !== "boolean")
                        return "ccEnableArenas: boolean expected";
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    if (!$util.isString(message.objcClassPrefix))
                        return "objcClassPrefix: string expected";
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    if (!$util.isString(message.csharpNamespace))
                        return "csharpNamespace: string expected";
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    if (!$util.isString(message.swiftPrefix))
                        return "swiftPrefix: string expected";
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    if (!$util.isString(message.phpClassPrefix))
                        return "phpClassPrefix: string expected";
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    if (!$util.isString(message.phpNamespace))
                        return "phpNamespace: string expected";
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    if (!$util.isString(message.phpMetadataNamespace))
                        return "phpMetadataNamespace: string expected";
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    if (!$util.isString(message.rubyPackage))
                        return "rubyPackage: string expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.javaPackage != null)
                    message.javaPackage = String(object.javaPackage);
                if (object.javaOuterClassname != null)
                    message.javaOuterClassname = String(object.javaOuterClassname);
                if (object.javaMultipleFiles != null)
                    message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                if (object.javaGenerateEqualsAndHash != null)
                    message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                if (object.javaStringCheckUtf8 != null)
                    message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                    message.optimizeFor = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimizeFor = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimizeFor = 3;
                    break;
                }
                if (object.goPackage != null)
                    message.goPackage = String(object.goPackage);
                if (object.ccGenericServices != null)
                    message.ccGenericServices = Boolean(object.ccGenericServices);
                if (object.javaGenericServices != null)
                    message.javaGenericServices = Boolean(object.javaGenericServices);
                if (object.pyGenericServices != null)
                    message.pyGenericServices = Boolean(object.pyGenericServices);
                if (object.phpGenericServices != null)
                    message.phpGenericServices = Boolean(object.phpGenericServices);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.ccEnableArenas != null)
                    message.ccEnableArenas = Boolean(object.ccEnableArenas);
                if (object.objcClassPrefix != null)
                    message.objcClassPrefix = String(object.objcClassPrefix);
                if (object.csharpNamespace != null)
                    message.csharpNamespace = String(object.csharpNamespace);
                if (object.swiftPrefix != null)
                    message.swiftPrefix = String(object.swiftPrefix);
                if (object.phpClassPrefix != null)
                    message.phpClassPrefix = String(object.phpClassPrefix);
                if (object.phpNamespace != null)
                    message.phpNamespace = String(object.phpNamespace);
                if (object.phpMetadataNamespace != null)
                    message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                if (object.rubyPackage != null)
                    message.rubyPackage = String(object.rubyPackage);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.javaPackage = "";
                    object.javaOuterClassname = "";
                    object.optimizeFor = options.enums === String ? "SPEED" : 1;
                    object.javaMultipleFiles = false;
                    object.goPackage = "";
                    object.ccGenericServices = false;
                    object.javaGenericServices = false;
                    object.pyGenericServices = false;
                    object.javaGenerateEqualsAndHash = false;
                    object.deprecated = false;
                    object.javaStringCheckUtf8 = false;
                    object.ccEnableArenas = true;
                    object.objcClassPrefix = "";
                    object.csharpNamespace = "";
                    object.swiftPrefix = "";
                    object.phpClassPrefix = "";
                    object.phpNamespace = "";
                    object.phpGenericServices = false;
                    object.phpMetadataNamespace = "";
                    object.rubyPackage = "";
                }
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    object.javaPackage = message.javaPackage;
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    object.javaOuterClassname = message.javaOuterClassname;
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    object.javaMultipleFiles = message.javaMultipleFiles;
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    object.goPackage = message.goPackage;
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    object.ccGenericServices = message.ccGenericServices;
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    object.javaGenericServices = message.javaGenericServices;
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    object.pyGenericServices = message.pyGenericServices;
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    object.ccEnableArenas = message.ccEnableArenas;
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    object.objcClassPrefix = message.objcClassPrefix;
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    object.csharpNamespace = message.csharpNamespace;
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    object.swiftPrefix = message.swiftPrefix;
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    object.phpClassPrefix = message.phpClassPrefix;
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    object.phpNamespace = message.phpNamespace;
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    object.phpGenericServices = message.phpGenericServices;
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    object.phpMetadataNamespace = message.phpMetadataNamespace;
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    object.rubyPackage = message.rubyPackage;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
             * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [mapEntry] MessageOptions mapEntry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
             * @property {boolean|null} [".validate.disabled"] MessageOptions .validate.disabled
             * @property {boolean|null} [".validate.ignored"] MessageOptions .validate.ignored
             * @property {clutch.api.v1.IReference|null} [".clutch.api.v1.reference"] MessageOptions .clutch.api.v1.reference
             * @property {clutch.api.v1.IIdentifier|null} [".clutch.api.v1.id"] MessageOptions .clutch.api.v1.id
             * @property {boolean|null} [".clutch.api.v1.redacted"] MessageOptions .clutch.api.v1.redacted
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions messageSetWireFormat.
             * @member {boolean} messageSetWireFormat
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.messageSetWireFormat = false;

            /**
             * MessageOptions noStandardDescriptorAccessor.
             * @member {boolean} noStandardDescriptorAccessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.noStandardDescriptorAccessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions mapEntry.
             * @member {boolean} mapEntry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.mapEntry = false;

            /**
             * MessageOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MessageOptions .validate.disabled.
             * @member {boolean} .validate.disabled
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".validate.disabled"] = false;

            /**
             * MessageOptions .validate.ignored.
             * @member {boolean} .validate.ignored
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".validate.ignored"] = false;

            /**
             * MessageOptions .clutch.api.v1.reference.
             * @member {clutch.api.v1.IReference|null|undefined} .clutch.api.v1.reference
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".clutch.api.v1.reference"] = null;

            /**
             * MessageOptions .clutch.api.v1.id.
             * @member {clutch.api.v1.IIdentifier|null|undefined} .clutch.api.v1.id
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".clutch.api.v1.id"] = null;

            /**
             * MessageOptions .clutch.api.v1.redacted.
             * @member {boolean} .clutch.api.v1.redacted
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".clutch.api.v1.redacted"] = false;

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    if (typeof message.messageSetWireFormat !== "boolean")
                        return "messageSetWireFormat: boolean expected";
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    if (typeof message.noStandardDescriptorAccessor !== "boolean")
                        return "noStandardDescriptorAccessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    if (typeof message.mapEntry !== "boolean")
                        return "mapEntry: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".validate.disabled"] != null && message.hasOwnProperty(".validate.disabled"))
                    if (typeof message[".validate.disabled"] !== "boolean")
                        return ".validate.disabled: boolean expected";
                if (message[".validate.ignored"] != null && message.hasOwnProperty(".validate.ignored"))
                    if (typeof message[".validate.ignored"] !== "boolean")
                        return ".validate.ignored: boolean expected";
                if (message[".clutch.api.v1.reference"] != null && message.hasOwnProperty(".clutch.api.v1.reference")) {
                    let error = $root.clutch.api.v1.Reference.verify(message[".clutch.api.v1.reference"]);
                    if (error)
                        return ".clutch.api.v1.reference." + error;
                }
                if (message[".clutch.api.v1.id"] != null && message.hasOwnProperty(".clutch.api.v1.id")) {
                    let error = $root.clutch.api.v1.Identifier.verify(message[".clutch.api.v1.id"]);
                    if (error)
                        return ".clutch.api.v1.id." + error;
                }
                if (message[".clutch.api.v1.redacted"] != null && message.hasOwnProperty(".clutch.api.v1.redacted"))
                    if (typeof message[".clutch.api.v1.redacted"] !== "boolean")
                        return ".clutch.api.v1.redacted: boolean expected";
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.messageSetWireFormat != null)
                    message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                if (object.noStandardDescriptorAccessor != null)
                    message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.mapEntry != null)
                    message.mapEntry = Boolean(object.mapEntry);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".validate.disabled"] != null)
                    message[".validate.disabled"] = Boolean(object[".validate.disabled"]);
                if (object[".validate.ignored"] != null)
                    message[".validate.ignored"] = Boolean(object[".validate.ignored"]);
                if (object[".clutch.api.v1.reference"] != null) {
                    if (typeof object[".clutch.api.v1.reference"] !== "object")
                        throw TypeError(".google.protobuf.MessageOptions..clutch.api.v1.reference: object expected");
                    message[".clutch.api.v1.reference"] = $root.clutch.api.v1.Reference.fromObject(object[".clutch.api.v1.reference"]);
                }
                if (object[".clutch.api.v1.id"] != null) {
                    if (typeof object[".clutch.api.v1.id"] !== "object")
                        throw TypeError(".google.protobuf.MessageOptions..clutch.api.v1.id: object expected");
                    message[".clutch.api.v1.id"] = $root.clutch.api.v1.Identifier.fromObject(object[".clutch.api.v1.id"]);
                }
                if (object[".clutch.api.v1.redacted"] != null)
                    message[".clutch.api.v1.redacted"] = Boolean(object[".clutch.api.v1.redacted"]);
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.messageSetWireFormat = false;
                    object.noStandardDescriptorAccessor = false;
                    object.deprecated = false;
                    object.mapEntry = false;
                    object[".validate.disabled"] = false;
                    object[".validate.ignored"] = false;
                    object[".clutch.api.v1.reference"] = null;
                    object[".clutch.api.v1.id"] = null;
                    object[".clutch.api.v1.redacted"] = false;
                }
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    object.messageSetWireFormat = message.messageSetWireFormat;
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    object.mapEntry = message.mapEntry;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".validate.disabled"] != null && message.hasOwnProperty(".validate.disabled"))
                    object[".validate.disabled"] = message[".validate.disabled"];
                if (message[".validate.ignored"] != null && message.hasOwnProperty(".validate.ignored"))
                    object[".validate.ignored"] = message[".validate.ignored"];
                if (message[".clutch.api.v1.reference"] != null && message.hasOwnProperty(".clutch.api.v1.reference"))
                    object[".clutch.api.v1.reference"] = $root.clutch.api.v1.Reference.toObject(message[".clutch.api.v1.reference"], options);
                if (message[".clutch.api.v1.id"] != null && message.hasOwnProperty(".clutch.api.v1.id"))
                    object[".clutch.api.v1.id"] = $root.clutch.api.v1.Identifier.toObject(message[".clutch.api.v1.id"], options);
                if (message[".clutch.api.v1.redacted"] != null && message.hasOwnProperty(".clutch.api.v1.redacted"))
                    object[".clutch.api.v1.redacted"] = message[".clutch.api.v1.redacted"];
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
             * @property {validate.IFieldRules|null} [".validate.rules"] FieldOptions .validate.rules
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * FieldOptions .validate.rules.
             * @member {validate.IFieldRules|null|undefined} .validate.rules
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".validate.rules"] = null;

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".validate.rules"] != null && message.hasOwnProperty(".validate.rules")) {
                    let error = $root.validate.FieldRules.verify(message[".validate.rules"]);
                    if (error)
                        return ".validate.rules." + error;
                }
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".validate.rules"] != null) {
                    if (typeof object[".validate.rules"] !== "object")
                        throw TypeError(".google.protobuf.FieldOptions..validate.rules: object expected");
                    message[".validate.rules"] = $root.validate.FieldRules.fromObject(object[".validate.rules"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".validate.rules"] = null;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".validate.rules"] != null && message.hasOwnProperty(".validate.rules"))
                    object[".validate.rules"] = $root.validate.FieldRules.toObject(message[".validate.rules"], options);
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
             * @property {boolean|null} [".validate.required"] OneofOptions .validate.required
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * OneofOptions .validate.required.
             * @member {boolean} .validate.required
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype[".validate.required"] = false;

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".validate.required"] != null && message.hasOwnProperty(".validate.required"))
                    if (typeof message[".validate.required"] !== "boolean")
                        return ".validate.required: boolean expected";
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".validate.required"] != null)
                    message[".validate.required"] = Boolean(object[".validate.required"]);
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object[".validate.required"] = false;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".validate.required"] != null && message.hasOwnProperty(".validate.required"))
                    object[".validate.required"] = message[".validate.required"];
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allowAlias] EnumOptions allowAlias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allowAlias.
             * @member {boolean} allowAlias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allowAlias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    if (typeof message.allowAlias !== "boolean")
                        return "allowAlias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allowAlias != null)
                    message.allowAlias = Boolean(object.allowAlias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.allowAlias = false;
                    object.deprecated = false;
                }
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    object.allowAlias = message.allowAlias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             * @property {clutch.api.v1.IAction|null} [".clutch.api.v1.action"] MethodOptions .clutch.api.v1.action
             * @property {boolean|null} [".clutch.api.v1.disableAudit"] MethodOptions .clutch.api.v1.disableAudit
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions idempotencyLevel.
             * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.idempotencyLevel = 0;

            /**
             * MethodOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * MethodOptions .clutch.api.v1.action.
             * @member {clutch.api.v1.IAction|null|undefined} .clutch.api.v1.action
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".clutch.api.v1.action"] = null;

            /**
             * MethodOptions .clutch.api.v1.disableAudit.
             * @member {boolean} .clutch.api.v1.disableAudit
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".clutch.api.v1.disableAudit"] = false;

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    switch (message.idempotencyLevel) {
                    default:
                        return "idempotencyLevel: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                if (message[".clutch.api.v1.action"] != null && message.hasOwnProperty(".clutch.api.v1.action")) {
                    let error = $root.clutch.api.v1.Action.verify(message[".clutch.api.v1.action"]);
                    if (error)
                        return ".clutch.api.v1.action." + error;
                }
                if (message[".clutch.api.v1.disableAudit"] != null && message.hasOwnProperty(".clutch.api.v1.disableAudit"))
                    if (typeof message[".clutch.api.v1.disableAudit"] !== "boolean")
                        return ".clutch.api.v1.disableAudit: boolean expected";
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                switch (object.idempotencyLevel) {
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                    message.idempotencyLevel = 0;
                    break;
                case "NO_SIDE_EFFECTS":
                case 1:
                    message.idempotencyLevel = 1;
                    break;
                case "IDEMPOTENT":
                case 2:
                    message.idempotencyLevel = 2;
                    break;
                }
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                if (object[".clutch.api.v1.action"] != null) {
                    if (typeof object[".clutch.api.v1.action"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..clutch.api.v1.action: object expected");
                    message[".clutch.api.v1.action"] = $root.clutch.api.v1.Action.fromObject(object[".clutch.api.v1.action"]);
                }
                if (object[".clutch.api.v1.disableAudit"] != null)
                    message[".clutch.api.v1.disableAudit"] = Boolean(object[".clutch.api.v1.disableAudit"]);
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                    object[".clutch.api.v1.action"] = null;
                    object[".clutch.api.v1.disableAudit"] = false;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".clutch.api.v1.action"] != null && message.hasOwnProperty(".clutch.api.v1.action"))
                    object[".clutch.api.v1.action"] = $root.clutch.api.v1.Action.toObject(message[".clutch.api.v1.action"], options);
                if (message[".clutch.api.v1.disableAudit"] != null && message.hasOwnProperty(".clutch.api.v1.disableAudit"))
                    object[".clutch.api.v1.disableAudit"] = message[".clutch.api.v1.disableAudit"];
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * IdempotencyLevel enum.
             * @name google.protobuf.MethodOptions.IdempotencyLevel
             * @enum {number}
             * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
             * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
             * @property {number} IDEMPOTENT=2 IDEMPOTENT value
             */
            MethodOptions.IdempotencyLevel = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                values[valuesById[2] = "IDEMPOTENT"] = 2;
                return values;
            })();

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifierValue] UninterpretedOption identifierValue
             * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
             * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
             * @property {number|null} [doubleValue] UninterpretedOption doubleValue
             * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
             * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifierValue.
             * @member {string} identifierValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifierValue = "";

            /**
             * UninterpretedOption positiveIntValue.
             * @member {number|Long} positiveIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negativeIntValue.
             * @member {number|Long} negativeIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption doubleValue.
             * @member {number} doubleValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.doubleValue = 0;

            /**
             * UninterpretedOption stringValue.
             * @member {Uint8Array} stringValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregateValue.
             * @member {string} aggregateValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregateValue = "";

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    if (!$util.isString(message.identifierValue))
                        return "identifierValue: string expected";
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                        return "positiveIntValue: integer|Long expected";
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                        return "negativeIntValue: integer|Long expected";
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    if (typeof message.doubleValue !== "number")
                        return "doubleValue: number expected";
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                        return "stringValue: buffer expected";
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    if (!$util.isString(message.aggregateValue))
                        return "aggregateValue: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifierValue != null)
                    message.identifierValue = String(object.identifierValue);
                if (object.positiveIntValue != null)
                    if ($util.Long)
                        (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                    else if (typeof object.positiveIntValue === "string")
                        message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                    else if (typeof object.positiveIntValue === "number")
                        message.positiveIntValue = object.positiveIntValue;
                    else if (typeof object.positiveIntValue === "object")
                        message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                if (object.negativeIntValue != null)
                    if ($util.Long)
                        (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                    else if (typeof object.negativeIntValue === "string")
                        message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                    else if (typeof object.negativeIntValue === "number")
                        message.negativeIntValue = object.negativeIntValue;
                    else if (typeof object.negativeIntValue === "object")
                        message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                if (object.doubleValue != null)
                    message.doubleValue = Number(object.doubleValue);
                if (object.stringValue != null)
                    if (typeof object.stringValue === "string")
                        $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                    else if (object.stringValue.length)
                        message.stringValue = object.stringValue;
                if (object.aggregateValue != null)
                    message.aggregateValue = String(object.aggregateValue);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifierValue = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positiveIntValue = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negativeIntValue = options.longs === String ? "0" : 0;
                    object.doubleValue = 0;
                    if (options.bytes === String)
                        object.stringValue = "";
                    else {
                        object.stringValue = [];
                        if (options.bytes !== Array)
                            object.stringValue = $util.newBuffer(object.stringValue);
                    }
                    object.aggregateValue = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    object.identifierValue = message.identifierValue;
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (typeof message.positiveIntValue === "number")
                        object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                    else
                        object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (typeof message.negativeIntValue === "number")
                        object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                    else
                        object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    object.aggregateValue = message.aggregateValue;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} namePart NamePart namePart
                 * @property {boolean} isExtension NamePart isExtension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart namePart.
                 * @member {string} namePart
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.namePart = "";

                /**
                 * NamePart isExtension.
                 * @member {boolean} isExtension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.isExtension = false;

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.namePart))
                        return "namePart: string expected";
                    if (typeof message.isExtension !== "boolean")
                        return "isExtension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.namePart != null)
                        message.namePart = String(object.namePart);
                    if (object.isExtension != null)
                        message.isExtension = Boolean(object.isExtension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.namePart = "";
                        object.isExtension = false;
                    }
                    if (message.namePart != null && message.hasOwnProperty("namePart"))
                        object.namePart = message.namePart;
                    if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                        object.isExtension = message.isExtension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leadingComments] Location leadingComments
                 * @property {string|null} [trailingComments] Location trailingComments
                 * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leadingDetachedComments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leadingComments.
                 * @member {string} leadingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingComments = "";

                /**
                 * Location trailingComments.
                 * @member {string} trailingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailingComments = "";

                /**
                 * Location leadingDetachedComments.
                 * @member {Array.<string>} leadingDetachedComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingDetachedComments = $util.emptyArray;

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        if (!$util.isString(message.leadingComments))
                            return "leadingComments: string expected";
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        if (!$util.isString(message.trailingComments))
                            return "trailingComments: string expected";
                    if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                        if (!Array.isArray(message.leadingDetachedComments))
                            return "leadingDetachedComments: array expected";
                        for (let i = 0; i < message.leadingDetachedComments.length; ++i)
                            if (!$util.isString(message.leadingDetachedComments[i]))
                                return "leadingDetachedComments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leadingComments != null)
                        message.leadingComments = String(object.leadingComments);
                    if (object.trailingComments != null)
                        message.trailingComments = String(object.trailingComments);
                    if (object.leadingDetachedComments) {
                        if (!Array.isArray(object.leadingDetachedComments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                        message.leadingDetachedComments = [];
                        for (let i = 0; i < object.leadingDetachedComments.length; ++i)
                            message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leadingDetachedComments = [];
                    }
                    if (options.defaults) {
                        object.leadingComments = "";
                        object.trailingComments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        object.leadingComments = message.leadingComments;
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        object.trailingComments = message.trailingComments;
                    if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                        object.leadingDetachedComments = [];
                        for (let j = 0; j < message.leadingDetachedComments.length; ++j)
                            object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [sourceFile] Annotation sourceFile
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation sourceFile.
                 * @member {string} sourceFile
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.sourceFile = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        if (!$util.isString(message.sourceFile))
                            return "sourceFile: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.sourceFile != null)
                        message.sourceFile = String(object.sourceFile);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.sourceFile = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        object.sourceFile = message.sourceFile;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Duration = (function() {

            /**
             * Properties of a Duration.
             * @memberof google.protobuf
             * @interface IDuration
             * @property {number|Long|null} [seconds] Duration seconds
             * @property {number|null} [nanos] Duration nanos
             */

            /**
             * Constructs a new Duration.
             * @memberof google.protobuf
             * @classdesc Represents a Duration.
             * @implements IDuration
             * @constructor
             * @param {google.protobuf.IDuration=} [properties] Properties to set
             */
            function Duration(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Duration seconds.
             * @member {number|Long} seconds
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Duration nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.nanos = 0;

            /**
             * Verifies a Duration message.
             * @function verify
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Duration.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Duration message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Duration} Duration
             */
            Duration.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Duration)
                    return object;
                let message = new $root.google.protobuf.Duration();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Duration message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.Duration} message Duration
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Duration.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Duration to JSON.
             * @function toJSON
             * @memberof google.protobuf.Duration
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Duration.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Duration;
        })();

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {number|Long|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {number|Long} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                let message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Timestamp;
        })();

        return protobuf;
    })();

    return google;
})();

export const clutch = $root.clutch = (() => {

    /**
     * Namespace clutch.
     * @exports clutch
     * @namespace
     */
    const clutch = {};

    clutch.api = (function() {

        /**
         * Namespace api.
         * @memberof clutch
         * @namespace
         */
        const api = {};

        api.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof clutch.api
             * @namespace
             */
            const v1 = {};

            /**
             * ActionType enum.
             * @name clutch.api.v1.ActionType
             * @enum {number}
             * @property {number} UNSPECIFIED=0 UNSPECIFIED value
             * @property {number} CREATE=1 CREATE value
             * @property {number} READ=2 READ value
             * @property {number} UPDATE=3 UPDATE value
             * @property {number} DELETE=4 DELETE value
             */
            v1.ActionType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNSPECIFIED"] = 0;
                values[valuesById[1] = "CREATE"] = 1;
                values[valuesById[2] = "READ"] = 2;
                values[valuesById[3] = "UPDATE"] = 3;
                values[valuesById[4] = "DELETE"] = 4;
                return values;
            })();

            v1.Action = (function() {

                /**
                 * Properties of an Action.
                 * @memberof clutch.api.v1
                 * @interface IAction
                 * @property {clutch.api.v1.ActionType|null} [type] Action type
                 */

                /**
                 * Constructs a new Action.
                 * @memberof clutch.api.v1
                 * @classdesc Represents an Action.
                 * @implements IAction
                 * @constructor
                 * @param {clutch.api.v1.IAction=} [properties] Properties to set
                 */
                function Action(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Action type.
                 * @member {clutch.api.v1.ActionType} type
                 * @memberof clutch.api.v1.Action
                 * @instance
                 */
                Action.prototype.type = 0;

                /**
                 * Verifies an Action message.
                 * @function verify
                 * @memberof clutch.api.v1.Action
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Action.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates an Action message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Action
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Action} Action
                 */
                Action.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Action)
                        return object;
                    let message = new $root.clutch.api.v1.Action();
                    switch (object.type) {
                    case "UNSPECIFIED":
                    case 0:
                        message.type = 0;
                        break;
                    case "CREATE":
                    case 1:
                        message.type = 1;
                        break;
                    case "READ":
                    case 2:
                        message.type = 2;
                        break;
                    case "UPDATE":
                    case 3:
                        message.type = 3;
                        break;
                    case "DELETE":
                    case 4:
                        message.type = 4;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Action message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Action
                 * @static
                 * @param {clutch.api.v1.Action} message Action
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Action.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.type = options.enums === String ? "UNSPECIFIED" : 0;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.clutch.api.v1.ActionType[message.type] : message.type;
                    return object;
                };

                /**
                 * Converts this Action to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Action
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Action.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Action;
            })();

            v1.Pattern = (function() {

                /**
                 * Properties of a Pattern.
                 * @memberof clutch.api.v1
                 * @interface IPattern
                 * @property {string|null} [typeUrl] Pattern typeUrl
                 * @property {string|null} [pattern] Pattern pattern
                 */

                /**
                 * Constructs a new Pattern.
                 * @memberof clutch.api.v1
                 * @classdesc Represents a Pattern.
                 * @implements IPattern
                 * @constructor
                 * @param {clutch.api.v1.IPattern=} [properties] Properties to set
                 */
                function Pattern(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Pattern typeUrl.
                 * @member {string} typeUrl
                 * @memberof clutch.api.v1.Pattern
                 * @instance
                 */
                Pattern.prototype.typeUrl = "";

                /**
                 * Pattern pattern.
                 * @member {string} pattern
                 * @memberof clutch.api.v1.Pattern
                 * @instance
                 */
                Pattern.prototype.pattern = "";

                /**
                 * Verifies a Pattern message.
                 * @function verify
                 * @memberof clutch.api.v1.Pattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Pattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.typeUrl != null && message.hasOwnProperty("typeUrl"))
                        if (!$util.isString(message.typeUrl))
                            return "typeUrl: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern"))
                        if (!$util.isString(message.pattern))
                            return "pattern: string expected";
                    return null;
                };

                /**
                 * Creates a Pattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Pattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Pattern} Pattern
                 */
                Pattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Pattern)
                        return object;
                    let message = new $root.clutch.api.v1.Pattern();
                    if (object.typeUrl != null)
                        message.typeUrl = String(object.typeUrl);
                    if (object.pattern != null)
                        message.pattern = String(object.pattern);
                    return message;
                };

                /**
                 * Creates a plain object from a Pattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Pattern
                 * @static
                 * @param {clutch.api.v1.Pattern} message Pattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Pattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.typeUrl = "";
                        object.pattern = "";
                    }
                    if (message.typeUrl != null && message.hasOwnProperty("typeUrl"))
                        object.typeUrl = message.typeUrl;
                    if (message.pattern != null && message.hasOwnProperty("pattern"))
                        object.pattern = message.pattern;
                    return object;
                };

                /**
                 * Converts this Pattern to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Pattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Pattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Pattern;
            })();

            v1.Identifier = (function() {

                /**
                 * Properties of an Identifier.
                 * @memberof clutch.api.v1
                 * @interface IIdentifier
                 * @property {Array.<clutch.api.v1.IPattern>|null} [patterns] Identifier patterns
                 */

                /**
                 * Constructs a new Identifier.
                 * @memberof clutch.api.v1
                 * @classdesc Represents an Identifier.
                 * @implements IIdentifier
                 * @constructor
                 * @param {clutch.api.v1.IIdentifier=} [properties] Properties to set
                 */
                function Identifier(properties) {
                    this.patterns = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Identifier patterns.
                 * @member {Array.<clutch.api.v1.IPattern>} patterns
                 * @memberof clutch.api.v1.Identifier
                 * @instance
                 */
                Identifier.prototype.patterns = $util.emptyArray;

                /**
                 * Verifies an Identifier message.
                 * @function verify
                 * @memberof clutch.api.v1.Identifier
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Identifier.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.patterns != null && message.hasOwnProperty("patterns")) {
                        if (!Array.isArray(message.patterns))
                            return "patterns: array expected";
                        for (let i = 0; i < message.patterns.length; ++i) {
                            let error = $root.clutch.api.v1.Pattern.verify(message.patterns[i]);
                            if (error)
                                return "patterns." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an Identifier message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Identifier
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Identifier} Identifier
                 */
                Identifier.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Identifier)
                        return object;
                    let message = new $root.clutch.api.v1.Identifier();
                    if (object.patterns) {
                        if (!Array.isArray(object.patterns))
                            throw TypeError(".clutch.api.v1.Identifier.patterns: array expected");
                        message.patterns = [];
                        for (let i = 0; i < object.patterns.length; ++i) {
                            if (typeof object.patterns[i] !== "object")
                                throw TypeError(".clutch.api.v1.Identifier.patterns: object expected");
                            message.patterns[i] = $root.clutch.api.v1.Pattern.fromObject(object.patterns[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Identifier message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Identifier
                 * @static
                 * @param {clutch.api.v1.Identifier} message Identifier
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Identifier.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.patterns = [];
                    if (message.patterns && message.patterns.length) {
                        object.patterns = [];
                        for (let j = 0; j < message.patterns.length; ++j)
                            object.patterns[j] = $root.clutch.api.v1.Pattern.toObject(message.patterns[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Identifier to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Identifier
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Identifier.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Identifier;
            })();

            v1.Reference = (function() {

                /**
                 * Properties of a Reference.
                 * @memberof clutch.api.v1
                 * @interface IReference
                 * @property {Array.<string>|null} [fields] Reference fields
                 */

                /**
                 * Constructs a new Reference.
                 * @memberof clutch.api.v1
                 * @classdesc Represents a Reference.
                 * @implements IReference
                 * @constructor
                 * @param {clutch.api.v1.IReference=} [properties] Properties to set
                 */
                function Reference(properties) {
                    this.fields = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Reference fields.
                 * @member {Array.<string>} fields
                 * @memberof clutch.api.v1.Reference
                 * @instance
                 */
                Reference.prototype.fields = $util.emptyArray;

                /**
                 * Verifies a Reference message.
                 * @function verify
                 * @memberof clutch.api.v1.Reference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Reference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fields != null && message.hasOwnProperty("fields")) {
                        if (!Array.isArray(message.fields))
                            return "fields: array expected";
                        for (let i = 0; i < message.fields.length; ++i)
                            if (!$util.isString(message.fields[i]))
                                return "fields: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Reference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Reference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Reference} Reference
                 */
                Reference.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Reference)
                        return object;
                    let message = new $root.clutch.api.v1.Reference();
                    if (object.fields) {
                        if (!Array.isArray(object.fields))
                            throw TypeError(".clutch.api.v1.Reference.fields: array expected");
                        message.fields = [];
                        for (let i = 0; i < object.fields.length; ++i)
                            message.fields[i] = String(object.fields[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Reference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Reference
                 * @static
                 * @param {clutch.api.v1.Reference} message Reference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Reference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.fields = [];
                    if (message.fields && message.fields.length) {
                        object.fields = [];
                        for (let j = 0; j < message.fields.length; ++j)
                            object.fields[j] = message.fields[j];
                    }
                    return object;
                };

                /**
                 * Converts this Reference to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Reference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Reference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Reference;
            })();

            v1.Redacted = (function() {

                /**
                 * Properties of a Redacted.
                 * @memberof clutch.api.v1
                 * @interface IRedacted
                 * @property {string|null} [redactedTypeUrl] Redacted redactedTypeUrl
                 */

                /**
                 * Constructs a new Redacted.
                 * @memberof clutch.api.v1
                 * @classdesc Represents a Redacted.
                 * @implements IRedacted
                 * @constructor
                 * @param {clutch.api.v1.IRedacted=} [properties] Properties to set
                 */
                function Redacted(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Redacted redactedTypeUrl.
                 * @member {string} redactedTypeUrl
                 * @memberof clutch.api.v1.Redacted
                 * @instance
                 */
                Redacted.prototype.redactedTypeUrl = "";

                /**
                 * Verifies a Redacted message.
                 * @function verify
                 * @memberof clutch.api.v1.Redacted
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Redacted.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.redactedTypeUrl != null && message.hasOwnProperty("redactedTypeUrl"))
                        if (!$util.isString(message.redactedTypeUrl))
                            return "redactedTypeUrl: string expected";
                    return null;
                };

                /**
                 * Creates a Redacted message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Redacted
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Redacted} Redacted
                 */
                Redacted.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Redacted)
                        return object;
                    let message = new $root.clutch.api.v1.Redacted();
                    if (object.redactedTypeUrl != null)
                        message.redactedTypeUrl = String(object.redactedTypeUrl);
                    return message;
                };

                /**
                 * Creates a plain object from a Redacted message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Redacted
                 * @static
                 * @param {clutch.api.v1.Redacted} message Redacted
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Redacted.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.redactedTypeUrl = "";
                    if (message.redactedTypeUrl != null && message.hasOwnProperty("redactedTypeUrl"))
                        object.redactedTypeUrl = message.redactedTypeUrl;
                    return object;
                };

                /**
                 * Converts this Redacted to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Redacted
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Redacted.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Redacted;
            })();

            return v1;
        })();

        return api;
    })();

    return clutch;
})();

export { $root as default };
